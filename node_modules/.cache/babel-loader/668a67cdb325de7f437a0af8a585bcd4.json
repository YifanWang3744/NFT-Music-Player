{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\n\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n\n      ;\n    }\n\n    return hexlify(value);\n  }\n\n  return value;\n} // This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\n\n\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const headers = {};\n  let url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n\n    url = connection.url;\n\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n\n    options.allowGzip = !!connection.allowGzip;\n\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n  }\n\n  const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1]\n        },\n        body: base64Decode(dataMatch[2])\n      };\n      let result = response.body;\n\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n\n      clearTimeout(timer);\n      timer = null;\n    };\n\n    return {\n      promise,\n      cancel\n    };\n  }();\n\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n\n        try {\n          response = yield getUrl(url, options);\n\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                } //console.log(\"Stalling 429\");\n\n\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n\n        let body = response.body;\n\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (response.statusCode < 200 || response.statusCode >= 300) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n                yield staller(timeout);\n                continue;\n              }\n            }\n\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n\n        runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n\n        return body;\n      }\n\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n\n    return result;\n  }; // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n\n\n  let body = null;\n\n  if (json != null) {\n    body = toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n\n    connection = updated;\n  }\n\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n\n  options = shallowCopy(options);\n\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n\n      done = true;\n\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return true;\n    };\n\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n\n            return;\n          }\n\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n\n          setTimeout(check, timeout);\n        }\n\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n\n    check();\n  });\n}","map":{"version":3,"mappings":"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","names":["decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","Promise","resolve","setTimeout","bodyify","value","type","split","trim","error","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","String","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","result","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","reject","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","parseInt","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","done","Error","retryLimit","check","then","undefined","oncePoll","once","onceBlock"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\web\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\r\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\r\nimport { shallowCopy } from \"@ethersproject/properties\";\r\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\r\n\r\nfunction staller(duration: number): Promise<void> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, duration);\r\n    });\r\n}\r\n\r\nfunction bodyify(value: any, type: string): string {\r\n    if (value == null) { return null; }\r\n\r\n    if (typeof(value) === \"string\") { return value; }\r\n\r\n    if (isBytesLike(value)) {\r\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\r\n            try {\r\n                return toUtf8String(value);\r\n            } catch (error) { };\r\n        }\r\n        return hexlify(value);\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n// Exported Types\r\nexport type ConnectionInfo = {\r\n    url: string,\r\n    headers?: { [key: string]: string | number }\r\n\r\n    user?: string,\r\n    password?: string,\r\n\r\n    allowInsecureAuthentication?: boolean,\r\n    allowGzip?: boolean,\r\n\r\n    throttleLimit?: number,\r\n    throttleSlotInterval?: number;\r\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\r\n\r\n    timeout?: number,\r\n};\r\n\r\nexport interface OnceBlockable {\r\n    once(eventName: \"block\", handler: () => void): void;\r\n}\r\n\r\nexport interface OncePollable {\r\n    once(eventName: \"poll\", handler: () => void): void;\r\n}\r\n\r\nexport type PollOptions = {\r\n    timeout?: number,\r\n    floor?: number,\r\n    ceiling?: number,\r\n    interval?: number,\r\n    retryLimit?: number,\r\n    onceBlock?: OnceBlockable\r\n    oncePoll?: OncePollable\r\n};\r\n\r\nexport type FetchJsonResponse = {\r\n    statusCode: number;\r\n    headers: { [ header: string ]: string };\r\n};\r\n\r\n\r\ntype Header = { key: string, value: string };\r\n\r\n// This API is still a work in progress; the future changes will likely be:\r\n// - ConnectionInfo => FetchDataRequest<T = any>\r\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\r\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\r\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\r\n// For this reason, it should be considered internal until the API is finalized\r\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\r\n\r\n    // How many times to retry in the event of a throttle\r\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\r\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\r\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\r\n\r\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\r\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\r\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\r\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\r\n\r\n    const headers: { [key: string]: Header } = { };\r\n\r\n    let url: string = null;\r\n\r\n    // @TODO: Allow ConnectionInfo to override some of these values\r\n    const options: Options = {\r\n        method: \"GET\",\r\n    };\r\n\r\n    let allow304 = false;\r\n\r\n    let timeout = 2 * 60 * 1000;\r\n\r\n    if (typeof(connection) === \"string\") {\r\n        url = connection;\r\n\r\n    } else if (typeof(connection) === \"object\") {\r\n        if (connection == null || connection.url == null) {\r\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\r\n        }\r\n\r\n        url = connection.url;\r\n\r\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\r\n            timeout = connection.timeout;\r\n        }\r\n\r\n        if (connection.headers) {\r\n            for (const key in connection.headers) {\r\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\r\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\r\n                    allow304 = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        options.allowGzip = !!connection.allowGzip;\r\n\r\n        if (connection.user != null && connection.password != null) {\r\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\r\n                logger.throwError(\r\n                    \"basic authentication requires a secure https url\",\r\n                    Logger.errors.INVALID_ARGUMENT,\r\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\r\n                );\r\n            }\r\n\r\n            const authorization = connection.user + \":\" + connection.password;\r\n            headers[\"authorization\"] = {\r\n                key: \"Authorization\",\r\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\r\n            };\r\n        }\r\n    }\r\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\r\n    const dataMatch = ((url) ? url.match(reData): null);\r\n    if (dataMatch) {\r\n        try {\r\n            const response = {\r\n                statusCode: 200,\r\n                statusMessage: \"OK\",\r\n                headers: { \"content-type\": dataMatch[1] },\r\n                body: base64Decode(dataMatch[2])\r\n            };\r\n\r\n            let result: T = <T><unknown>response.body;\r\n            if (processFunc) {\r\n                result = processFunc(response.body, response);\r\n            }\r\n            return Promise.resolve(<T><unknown>result);\r\n\r\n        } catch (error) {\r\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\r\n                body: bodyify(dataMatch[1], dataMatch[2]),\r\n                error: error,\r\n                requestBody: null,\r\n                requestMethod: \"GET\",\r\n                url: url\r\n            });\r\n        }\r\n    }\r\n\r\n    if (body) {\r\n        options.method = \"POST\";\r\n        options.body = body;\r\n        if (headers[\"content-type\"] == null) {\r\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\r\n        }\r\n        if (headers[\"content-length\"] == null) {\r\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\r\n        }\r\n    }\r\n\r\n    const flatHeaders: { [ key: string ]: string } = { };\r\n    Object.keys(headers).forEach((key) => {\r\n        const header = headers[key];\r\n        flatHeaders[header.key] = header.value;\r\n    });\r\n    options.headers = flatHeaders;\r\n\r\n    const runningTimeout = (function() {\r\n        let timer: NodeJS.Timer = null;\r\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\r\n            if (timeout) {\r\n                timer = setTimeout(() => {\r\n                    if (timer == null) { return; }\r\n                    timer = null;\r\n\r\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\r\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\r\n                        requestMethod: options.method,\r\n                        timeout: timeout,\r\n                        url: url\r\n                    }));\r\n                }, timeout);\r\n            }\r\n        });\r\n\r\n        const cancel = function() {\r\n            if (timer == null) { return; }\r\n            clearTimeout(timer);\r\n            timer = null;\r\n        }\r\n\r\n        return { promise, cancel };\r\n    })();\r\n\r\n    const runningFetch = (async function() {\r\n\r\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\r\n            let response: GetUrlResponse = null;\r\n\r\n            try {\r\n                response = await getUrl(url, options);\r\n\r\n                if (attempt < attemptLimit) {\r\n                    if (response.statusCode === 301 || response.statusCode === 302) {\r\n                        // Redirection; for now we only support absolute locataions\r\n                        const location = response.headers.location || \"\";\r\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\r\n                            url = response.headers.location;\r\n                            continue;\r\n                        }\r\n\r\n                    } else if (response.statusCode === 429) {\r\n                        // Exponential back-off throttling\r\n                        let tryAgain = true;\r\n                        if (throttleCallback) {\r\n                            tryAgain = await throttleCallback(attempt, url);\r\n                        }\r\n\r\n                        if (tryAgain) {\r\n                            let stall = 0;\r\n\r\n                            const retryAfter = response.headers[\"retry-after\"];\r\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\r\n                                stall = parseInt(retryAfter) * 1000;\r\n                            } else {\r\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\r\n                            }\r\n\r\n                            //console.log(\"Stalling 429\");\r\n                            await staller(stall);\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } catch (error) {\r\n                response = (<any>error).response;\r\n                if (response == null) {\r\n                    runningTimeout.cancel();\r\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\r\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\r\n                        requestMethod: options.method,\r\n                        serverError: error,\r\n                        url: url\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n            let body = response.body;\r\n\r\n            if (allow304 && response.statusCode === 304) {\r\n                body = null;\r\n\r\n            } else if (response.statusCode < 200 || response.statusCode >= 300) {\r\n                runningTimeout.cancel();\r\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\r\n                    status: response.statusCode,\r\n                    headers: response.headers,\r\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\r\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\r\n                    requestMethod: options.method,\r\n                    url: url\r\n                });\r\n            }\r\n\r\n            if (processFunc) {\r\n                try {\r\n                    const result = await processFunc(body, response);\r\n                    runningTimeout.cancel();\r\n                    return result;\r\n\r\n                } catch (error) {\r\n                    // Allow the processFunc to trigger a throttle\r\n                    if (error.throttleRetry && attempt < attemptLimit) {\r\n                        let tryAgain = true;\r\n                        if (throttleCallback) {\r\n                            tryAgain = await throttleCallback(attempt, url);\r\n                        }\r\n\r\n                        if (tryAgain) {\r\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\r\n                            //console.log(\"Stalling callback\");\r\n                            await staller(timeout);\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    runningTimeout.cancel();\r\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\r\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\r\n                        error: error,\r\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\r\n                        requestMethod: options.method,\r\n                        url: url\r\n                    });\r\n                }\r\n            }\r\n\r\n            runningTimeout.cancel();\r\n\r\n            // If we had a processFunc, it either returned a T or threw above.\r\n            // The \"body\" is now a Uint8Array.\r\n            return <T>(<unknown>body);\r\n        }\r\n\r\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\r\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\r\n            requestMethod: options.method,\r\n            url: url\r\n        });\r\n    })();\r\n\r\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\r\n}\r\n\r\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\r\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\r\n        let result: any = null;\r\n        if (value != null) {\r\n            try {\r\n                result = JSON.parse(toUtf8String(value));\r\n            } catch (error) {\r\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\r\n                    body: value,\r\n                    error: error\r\n                });\r\n            }\r\n        }\r\n\r\n        if (processFunc) {\r\n            result = processFunc(result, response);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // If we have json to send, we must\r\n    // - add content-type of application/json (unless already overridden)\r\n    // - convert the json to bytes\r\n    let body: Uint8Array = null;\r\n    if (json != null) {\r\n        body = toUtf8Bytes(json);\r\n\r\n        // Create a connection with the content-type set for JSON\r\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\r\n        if (updated.headers) {\r\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\r\n            if (!hasContentType) {\r\n                updated.headers = shallowCopy(updated.headers);\r\n                updated.headers[\"content-type\"] = \"application/json\";\r\n            }\r\n        } else {\r\n            updated.headers = { \"content-type\": \"application/json\" };\r\n        }\r\n        connection = updated;\r\n    }\r\n\r\n    return _fetchData<any>(connection, body, processJsonFunc);\r\n}\r\n\r\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\r\n    if (!options) { options = {}; }\r\n    options = shallowCopy(options);\r\n    if (options.floor == null) { options.floor = 0; }\r\n    if (options.ceiling == null) { options.ceiling = 10000; }\r\n    if (options.interval == null) { options.interval = 250; }\r\n\r\n    return new Promise(function(resolve, reject) {\r\n\r\n        let timer: NodeJS.Timer = null;\r\n        let done: boolean = false;\r\n\r\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\r\n        const cancel = (): boolean => {\r\n            if (done) { return false; }\r\n            done = true;\r\n            if (timer) { clearTimeout(timer); }\r\n            return true;\r\n        };\r\n\r\n        if (options.timeout) {\r\n            timer = setTimeout(() => {\r\n                if (cancel()) { reject(new Error(\"timeout\")); }\r\n            }, options.timeout)\r\n        }\r\n\r\n        const retryLimit = options.retryLimit;\r\n\r\n        let attempt = 0;\r\n        function check() {\r\n            return func().then(function(result) {\r\n\r\n                // If we have a result, or are allowed null then we're done\r\n                if (result !== undefined) {\r\n                    if (cancel()) { resolve(result); }\r\n\r\n                } else if (options.oncePoll) {\r\n                    options.oncePoll.once(\"poll\", check);\r\n\r\n                } else if (options.onceBlock) {\r\n                    options.onceBlock.once(\"block\", check);\r\n\r\n                // Otherwise, exponential back-off (up to 10s) our next request\r\n                } else if (!done) {\r\n                    attempt++;\r\n                    if (attempt > retryLimit) {\r\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\r\n                        return;\r\n                    }\r\n\r\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\r\n                    if (timeout < options.floor) { timeout = options.floor; }\r\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\r\n\r\n                    setTimeout(check, timeout);\r\n                }\r\n\r\n                return null;\r\n            }, function(error) {\r\n                if (cancel()) { reject(error); }\r\n            });\r\n        }\r\n        check();\r\n    });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}