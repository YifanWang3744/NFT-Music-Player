{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    const match = network.match(/^(ws|http)s?:/i);\n\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n\n        case \"ws\":\n          return new WebSocketProvider(network);\n\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n\n  const n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider,\n    AlchemyProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    JsonRpcProvider,\n    NodesmithProvider,\n    PocketProvider,\n    Web3Provider,\n    IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, ///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, ///////////////////////\n// Signer\nJsonRpcSigner, ///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, ///////////////////////\n// Objects\nFormatter };","map":{"version":3,"mappings":"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","names":["Provider","getNetwork","BaseProvider","Resolver","AlchemyProvider","AlchemyWebSocketProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","InfuraWebSocketProvider","JsonRpcProvider","JsonRpcSigner","JsonRpcBatchProvider","NodesmithProvider","PocketProvider","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","Formatter","isCommunityResourcable","isCommunityResource","showThrottleMessage","Logger","version","logger","getDefaultProvider","network","options","match","throwArgumentError","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\providers\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport {\r\n    Block,\r\n    BlockTag,\r\n    EventType,\r\n    FeeData,\r\n    Filter,\r\n    Log,\r\n    Listener,\r\n    Provider,\r\n    TransactionReceipt,\r\n    TransactionRequest,\r\n    TransactionResponse\r\n} from \"@ethersproject/abstract-provider\";\r\n\r\nimport { getNetwork } from \"@ethersproject/networks\";\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\n\r\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\r\n\r\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\r\nimport { CloudflareProvider } from \"./cloudflare-provider\";\r\nimport { EtherscanProvider } from \"./etherscan-provider\";\r\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\r\nimport { IpcProvider } from \"./ipc-provider\";\r\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\r\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\r\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\r\nimport { NodesmithProvider } from \"./nodesmith-provider\";\r\nimport { PocketProvider } from \"./pocket-provider\";\r\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\r\nimport { Web3Provider } from \"./web3-provider\";\r\nimport { WebSocketProvider } from \"./websocket-provider\";\r\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\r\n\r\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n////////////////////////\r\n// Helper Functions\r\n\r\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\r\n    if (network == null) { network = \"homestead\"; }\r\n\r\n    // If passed a URL, figure out the right type of provider based on the scheme\r\n    if (typeof(network) === \"string\") {\r\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\r\n\r\n        // Handle http and ws (and their secure variants)\r\n        const match = network.match(/^(ws|http)s?:/i);\r\n        if (match) {\r\n            switch (match[1]) {\r\n                case \"http\":\r\n                    return new JsonRpcProvider(network);\r\n                case \"ws\":\r\n                    return new WebSocketProvider(network);\r\n                default:\r\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\r\n            }\r\n        }\r\n    }\r\n\r\n    const n = getNetwork(network);\r\n    if (!n || !n._defaultProvider) {\r\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\r\n            operation: \"getDefaultProvider\",\r\n            network: network\r\n        });\r\n    }\r\n\r\n    return n._defaultProvider({\r\n        FallbackProvider,\r\n\r\n        AlchemyProvider,\r\n        CloudflareProvider,\r\n        EtherscanProvider,\r\n        InfuraProvider,\r\n        JsonRpcProvider,\r\n        NodesmithProvider,\r\n        PocketProvider,\r\n        Web3Provider,\r\n\r\n        IpcProvider,\r\n    }, options);\r\n}\r\n\r\n////////////////////////\r\n// Exports\r\n\r\nexport {\r\n\r\n    // Abstract Providers (or Abstract-ish)\r\n    Provider,\r\n    BaseProvider,\r\n\r\n    Resolver,\r\n\r\n    UrlJsonRpcProvider,\r\n\r\n    ///////////////////////\r\n    // Concrete Providers\r\n\r\n    FallbackProvider,\r\n\r\n    AlchemyProvider,\r\n    AlchemyWebSocketProvider,\r\n    CloudflareProvider,\r\n    EtherscanProvider,\r\n    InfuraProvider,\r\n    InfuraWebSocketProvider,\r\n    JsonRpcProvider,\r\n    JsonRpcBatchProvider,\r\n    NodesmithProvider,\r\n    PocketProvider,\r\n    StaticJsonRpcProvider,\r\n    Web3Provider,\r\n    WebSocketProvider,\r\n\r\n    IpcProvider,\r\n\r\n\r\n    ///////////////////////\r\n    // Signer\r\n\r\n    JsonRpcSigner,\r\n\r\n\r\n    ///////////////////////\r\n    // Functions\r\n\r\n    getDefaultProvider,\r\n    getNetwork,\r\n    isCommunityResource,\r\n    isCommunityResourcable,\r\n    showThrottleMessage,\r\n\r\n\r\n    ///////////////////////\r\n    // Objects\r\n\r\n    Formatter,\r\n\r\n\r\n    ///////////////////////\r\n    // Types\r\n\r\n    Block,\r\n    BlockTag,\r\n    EventType,\r\n    FeeData,\r\n    Filter,\r\n    Log,\r\n    Listener,\r\n    TransactionReceipt,\r\n    TransactionRequest,\r\n    TransactionResponse,\r\n\r\n    ExternalProvider,\r\n    JsonRpcFetchFunc,\r\n\r\n    FallbackProviderConfig,\r\n\r\n    Network,\r\n    Networkish,\r\n\r\n    EnsProvider,\r\n    EnsResolver,\r\n\r\n    CommunityResourcable\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}