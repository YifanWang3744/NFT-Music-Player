{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Exported Types\n\nfunction hasMnemonic(value) {\n  return value != null && value.mnemonic && value.mnemonic.phrase;\n}\n\nexport class KeystoreAccount extends Description {\n  isKeystoreAccount(value) {\n    return !!(value && value._isKeystoreAccount);\n  }\n\n}\n\nfunction _decrypt(data, key, ciphertext) {\n  const cipher = searchPath(data, \"crypto/cipher\");\n\n  if (cipher === \"aes-128-ctr\") {\n    const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n    return arrayify(aesCtr.decrypt(ciphertext));\n  }\n\n  return null;\n}\n\nfunction _getAccount(data, key) {\n  const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n\n  if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n    throw new Error(\"invalid password\");\n  }\n\n  const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\n  if (!privateKey) {\n    logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"decrypt\"\n    });\n  }\n\n  const mnemonicKey = key.slice(32, 64);\n  const address = computeAddress(privateKey);\n\n  if (data.address) {\n    let check = data.address.toLowerCase();\n\n    if (check.substring(0, 2) !== \"0x\") {\n      check = \"0x\" + check;\n    }\n\n    if (getAddress(check) !== address) {\n      throw new Error(\"address mismatch\");\n    }\n  }\n\n  const account = {\n    _isKeystoreAccount: true,\n    address: address,\n    privateKey: hexlify(privateKey)\n  }; // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\n  if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n    const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n    const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n    const mnemonicCounter = new aes.Counter(mnemonicIv);\n    const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n    const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n    const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\n    try {\n      const mnemonic = entropyToMnemonic(entropy, locale);\n      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n\n      account.mnemonic = node.mnemonic;\n    } catch (error) {\n      // If we don't have the locale wordlist installed to\n      // read this mnemonic, just bail and don't set the\n      // mnemonic\n      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n        throw error;\n      }\n    }\n  }\n\n  return new KeystoreAccount(account);\n}\n\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n  return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n  const passwordBytes = getPassword(password);\n  const kdf = searchPath(data, \"crypto/kdf\");\n\n  if (kdf && typeof kdf === \"string\") {\n    const throwError = function (name, value) {\n      return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n    };\n\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n      const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n      const p = parseInt(searchPath(data, \"crypto/kdfparams/p\")); // Check for all required parameters\n\n      if (!N || !r || !p) {\n        throwError(\"kdf\", kdf);\n      } // Make sure N is a power of 2\n\n\n      if ((N & N - 1) !== 0) {\n        throwError(\"N\", N);\n      }\n\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n\n      return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      let prfFunc = null;\n      const prf = searchPath(data, \"crypto/kdfparams/prf\");\n\n      if (prf === \"hmac-sha256\") {\n        prfFunc = \"sha256\";\n      } else if (prf === \"hmac-sha512\") {\n        prfFunc = \"sha512\";\n      } else {\n        throwError(\"prf\", prf);\n      }\n\n      const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n\n      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n    }\n  }\n\n  return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\nexport function decryptSync(json, password) {\n  const data = JSON.parse(json);\n\n  const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n\n  return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const data = JSON.parse(json);\n    const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n    return _getAccount(data, key);\n  });\n}\nexport function encrypt(account, password, options, progressCallback) {\n  try {\n    // Check the address matches the private key\n    if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n      throw new Error(\"address/privateKey mismatch\");\n    } // Check the mnemonic (if any) matches the private key\n\n\n    if (hasMnemonic(account)) {\n      const mnemonic = account.mnemonic;\n      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  } // The options are optional, so adjust the call as needed\n\n\n  if (typeof options === \"function\" && !progressCallback) {\n    progressCallback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  const privateKey = arrayify(account.privateKey);\n  const passwordBytes = getPassword(password);\n  let entropy = null;\n  let path = null;\n  let locale = null;\n\n  if (hasMnemonic(account)) {\n    const srcMnemonic = account.mnemonic;\n    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n    path = srcMnemonic.path || defaultPath;\n    locale = srcMnemonic.locale || \"en\";\n  }\n\n  let client = options.client;\n\n  if (!client) {\n    client = \"ethers.js\";\n  } // Check/generate the salt\n\n\n  let salt = null;\n\n  if (options.salt) {\n    salt = arrayify(options.salt);\n  } else {\n    salt = randomBytes(32);\n    ;\n  } // Override initialization vector\n\n\n  let iv = null;\n\n  if (options.iv) {\n    iv = arrayify(options.iv);\n\n    if (iv.length !== 16) {\n      throw new Error(\"invalid iv\");\n    }\n  } else {\n    iv = randomBytes(16);\n  } // Override the uuid\n\n\n  let uuidRandom = null;\n\n  if (options.uuid) {\n    uuidRandom = arrayify(options.uuid);\n\n    if (uuidRandom.length !== 16) {\n      throw new Error(\"invalid uuid\");\n    }\n  } else {\n    uuidRandom = randomBytes(16);\n  } // Override the scrypt password-based key derivation function parameters\n\n\n  let N = 1 << 17,\n      r = 8,\n      p = 1;\n\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  } // We take 64 bytes:\n  //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\n\n  return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(key => {\n    key = arrayify(key); // This will be used to encrypt the wallet (as per Web3 secret storage)\n\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32); // This will be used to encrypt the mnemonic phrase (if any)\n\n    const mnemonicKey = key.slice(32, 64); // Encrypt the private key\n\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n    const ciphertext = arrayify(aesCtr.encrypt(privateKey)); // Compute the message authentication code, used to check the password\n\n    const mac = keccak256(concat([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\n    const data = {\n      address: account.address.substring(2).toLowerCase(),\n      id: uuidV4(uuidRandom),\n      version: 3,\n      Crypto: {\n        cipher: \"aes-128-ctr\",\n        cipherparams: {\n          iv: hexlify(iv).substring(2)\n        },\n        ciphertext: hexlify(ciphertext).substring(2),\n        kdf: \"scrypt\",\n        kdfparams: {\n          salt: hexlify(salt).substring(2),\n          n: N,\n          dklen: 32,\n          p: p,\n          r: r\n        },\n        mac: mac.substring(2)\n      }\n    }; // If we have a mnemonic, encrypt it into the JSON wallet\n\n    if (entropy) {\n      const mnemonicIv = randomBytes(16);\n      const mnemonicCounter = new aes.Counter(mnemonicIv);\n      const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n      const now = new Date();\n      const timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n      data[\"x-ethers\"] = {\n        client: client,\n        gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n        mnemonicCounter: hexlify(mnemonicIv).substring(2),\n        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n        path: path,\n        locale: locale,\n        version: \"0.1\"\n      };\n    }\n\n    return JSON.stringify(data);\n  });\n}","map":{"version":3,"mappings":"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","names":["aes","scrypt","getAddress","arrayify","concat","hexlify","defaultPath","entropyToMnemonic","HDNode","mnemonicToEntropy","keccak256","pbkdf2","_pbkdf2","randomBytes","Description","computeAddress","getPassword","looseArrayify","searchPath","uuidV4","zpad","Logger","version","logger","hasMnemonic","value","mnemonic","phrase","KeystoreAccount","isKeystoreAccount","_isKeystoreAccount","_decrypt","data","key","ciphertext","cipher","iv","counter","Counter","aesCtr","ModeOfOperation","ctr","decrypt","_getAccount","computedMAC","slice","substring","toLowerCase","Error","privateKey","throwError","errors","UNSUPPORTED_OPERATION","operation","mnemonicKey","address","check","account","mnemonicCiphertext","mnemonicIv","mnemonicCounter","mnemonicAesCtr","path","locale","entropy","node","fromMnemonic","derivePath","error","code","INVALID_ARGUMENT","argument","pbkdf2Sync","passwordBytes","salt","count","dkLen","prfFunc","Promise","resolve","_computeKdfKey","password","pbkdf2Func","scryptFunc","progressCallback","kdf","name","throwArgumentError","N","parseInt","r","p","prf","decryptSync","json","JSON","parse","syncScrypt","encrypt","options","e","reject","srcMnemonic","client","length","uuidRandom","uuid","then","derivedKey","macPrefix","mac","id","Crypto","cipherparams","kdfparams","n","dklen","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","stringify"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\json-wallets\\src.ts\\keystore.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport aes from \"aes-js\";\r\nimport scrypt from \"scrypt-js\";\r\n\r\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\r\nimport { getAddress } from \"@ethersproject/address\";\r\nimport { arrayify, Bytes, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\r\nimport { defaultPath, entropyToMnemonic, HDNode, Mnemonic, mnemonicToEntropy } from \"@ethersproject/hdnode\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\";\r\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\r\nimport { randomBytes } from \"@ethersproject/random\";\r\nimport { Description } from \"@ethersproject/properties\";\r\nimport { computeAddress } from \"@ethersproject/transactions\";\r\n\r\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n// Exported Types\r\n\r\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\r\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\r\n}\r\n\r\nexport interface _KeystoreAccount {\r\n    address: string;\r\n    privateKey: string;\r\n    mnemonic?: Mnemonic;\r\n\r\n    _isKeystoreAccount: boolean;\r\n}\r\n\r\nexport class KeystoreAccount extends Description<_KeystoreAccount> implements ExternallyOwnedAccount {\r\n    readonly address: string;\r\n    readonly privateKey: string;\r\n    readonly mnemonic?: Mnemonic;\r\n\r\n    readonly _isKeystoreAccount: boolean;\r\n\r\n    isKeystoreAccount(value: any): value is KeystoreAccount {\r\n        return !!(value && value._isKeystoreAccount);\r\n    }\r\n}\r\n\r\nexport type ProgressCallback = (percent: number) => void;\r\n\r\nexport type EncryptOptions = {\r\n   iv?: BytesLike;\r\n   entropy?: BytesLike;\r\n   client?: string;\r\n   salt?: BytesLike;\r\n   uuid?: string;\r\n   scrypt?: {\r\n       N?: number;\r\n       r?: number;\r\n       p?: number;\r\n   }\r\n}\r\n\r\nfunction _decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): Uint8Array {\r\n    const cipher = searchPath(data, \"crypto/cipher\");\r\n    if (cipher === \"aes-128-ctr\") {\r\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"))\r\n        const counter = new aes.Counter(iv);\r\n\r\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\r\n\r\n        return arrayify(aesCtr.decrypt(ciphertext));\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction _getAccount(data: any, key: Uint8Array): KeystoreAccount {\r\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\r\n\r\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\r\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\r\n        throw new Error(\"invalid password\");\r\n    }\r\n\r\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\r\n\r\n    if (!privateKey) {\r\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"decrypt\"\r\n        });\r\n    }\r\n\r\n    const mnemonicKey = key.slice(32, 64);\r\n\r\n    const address = computeAddress(privateKey);\r\n    if (data.address) {\r\n        let check = data.address.toLowerCase();\r\n        if (check.substring(0, 2) !== \"0x\") { check = \"0x\" + check; }\r\n\r\n        if (getAddress(check) !== address) {\r\n            throw new Error(\"address mismatch\");\r\n        }\r\n    }\r\n\r\n    const account: _KeystoreAccount = {\r\n        _isKeystoreAccount: true,\r\n        address: address,\r\n        privateKey: hexlify(privateKey)\r\n    };\r\n\r\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\r\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\r\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\r\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\r\n\r\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\r\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\r\n\r\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\r\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\r\n\r\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\r\n\r\n        try {\r\n            const mnemonic = entropyToMnemonic(entropy, locale);\r\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\r\n\r\n            if (node.privateKey != account.privateKey) {\r\n                throw new Error(\"mnemonic mismatch\");\r\n            }\r\n\r\n            account.mnemonic = node.mnemonic;\r\n\r\n        } catch (error) {\r\n            // If we don't have the locale wordlist installed to\r\n            // read this mnemonic, just bail and don't set the\r\n            // mnemonic\r\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    return new KeystoreAccount(account);\r\n}\r\n\r\ntype ScryptFunc<T> = (pw: Uint8Array, salt: Uint8Array, n: number, r: number, p: number, dkLen: number, callback?: ProgressCallback) => T;\r\ntype Pbkdf2Func<T> = (pw: Uint8Array, salt: Uint8Array, c: number, dkLen: number, prfFunc: string) => T;\r\n\r\nfunction pbkdf2Sync(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Uint8Array {\r\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\r\n}\r\n\r\nfunction pbkdf2(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Promise<Uint8Array> {\r\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\r\n}\r\n\r\nfunction _computeKdfKey<T>(data: any, password: Bytes | string, pbkdf2Func: Pbkdf2Func<T>, scryptFunc: ScryptFunc<T>, progressCallback?: ProgressCallback): T {\r\n    const passwordBytes = getPassword(password);\r\n\r\n    const kdf = searchPath(data, \"crypto/kdf\");\r\n\r\n    if (kdf && typeof(kdf) === \"string\") {\r\n        const throwError = function(name: string, value: any): never {\r\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\r\n        }\r\n\r\n        if (kdf.toLowerCase() === \"scrypt\") {\r\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\r\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\r\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\r\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\r\n\r\n            // Check for all required parameters\r\n            if (!N || !r || !p) { throwError(\"kdf\", kdf); }\r\n\r\n            // Make sure N is a power of 2\r\n            if ((N & (N - 1)) !== 0) { throwError(\"N\", N); }\r\n\r\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\r\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\r\n\r\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\r\n\r\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\r\n\r\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\r\n\r\n            let prfFunc: string = null;\r\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\r\n            if (prf === \"hmac-sha256\") {\r\n                prfFunc = \"sha256\";\r\n            } else if (prf === \"hmac-sha512\") {\r\n                prfFunc = \"sha512\";\r\n            } else {\r\n                throwError(\"prf\", prf);\r\n            }\r\n\r\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\r\n\r\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\r\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\r\n\r\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\r\n        }\r\n    }\r\n\r\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\r\n}\r\n\r\n\r\nexport function decryptSync(json: string, password: Bytes | string): KeystoreAccount {\r\n    const data = JSON.parse(json);\r\n\r\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\r\n    return _getAccount(data, key);\r\n}\r\n\r\nexport async function decrypt(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<KeystoreAccount> {\r\n    const data = JSON.parse(json);\r\n\r\n    const key = await _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\r\n    return _getAccount(data, key);\r\n}\r\n\r\n\r\nexport function encrypt(account: ExternallyOwnedAccount, password: Bytes | string, options?: EncryptOptions, progressCallback?: ProgressCallback): Promise<string> {\r\n\r\n    try {\r\n        // Check the address matches the private key\r\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\r\n            throw new Error(\"address/privateKey mismatch\");\r\n        }\r\n\r\n        // Check the mnemonic (if any) matches the private key\r\n        if (hasMnemonic(account)) {\r\n            const mnemonic = account.mnemonic;\r\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\r\n\r\n            if (node.privateKey != account.privateKey) {\r\n                throw new Error(\"mnemonic mismatch\");\r\n            }\r\n        }\r\n\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n\r\n    // The options are optional, so adjust the call as needed\r\n    if (typeof(options) === \"function\" && !progressCallback) {\r\n        progressCallback = options;\r\n        options = {};\r\n    }\r\n    if (!options) { options = {}; }\r\n\r\n    const privateKey: Uint8Array = arrayify(account.privateKey);\r\n    const passwordBytes = getPassword(password);\r\n\r\n    let entropy: Uint8Array = null\r\n    let path: string = null;\r\n    let locale: string = null;\r\n    if (hasMnemonic(account)) {\r\n        const srcMnemonic = account.mnemonic;\r\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\r\n        path = srcMnemonic.path || defaultPath;\r\n        locale = srcMnemonic.locale || \"en\";\r\n    }\r\n\r\n    let client = options.client;\r\n    if (!client) { client = \"ethers.js\"; }\r\n\r\n    // Check/generate the salt\r\n    let salt: Uint8Array = null;\r\n    if (options.salt) {\r\n        salt = arrayify(options.salt);\r\n    } else {\r\n        salt = randomBytes(32);;\r\n    }\r\n\r\n    // Override initialization vector\r\n    let iv: Uint8Array = null;\r\n    if (options.iv) {\r\n        iv = arrayify(options.iv);\r\n        if (iv.length !== 16) { throw new Error(\"invalid iv\"); }\r\n    } else {\r\n       iv = randomBytes(16);\r\n    }\r\n\r\n    // Override the uuid\r\n    let uuidRandom: Uint8Array = null;\r\n    if (options.uuid) {\r\n        uuidRandom = arrayify(options.uuid);\r\n        if (uuidRandom.length !== 16) { throw new Error(\"invalid uuid\"); }\r\n    } else {\r\n        uuidRandom = randomBytes(16);\r\n    }\r\n\r\n    // Override the scrypt password-based key derivation function parameters\r\n    let N = (1 << 17), r = 8, p = 1;\r\n    if (options.scrypt) {\r\n        if (options.scrypt.N) { N = options.scrypt.N; }\r\n        if (options.scrypt.r) { r = options.scrypt.r; }\r\n        if (options.scrypt.p) { p = options.scrypt.p; }\r\n    }\r\n\r\n    // We take 64 bytes:\r\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\r\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\r\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\r\n        key = arrayify(key);\r\n\r\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\r\n        const derivedKey = key.slice(0, 16);\r\n        const macPrefix = key.slice(16, 32);\r\n\r\n        // This will be used to encrypt the mnemonic phrase (if any)\r\n        const mnemonicKey = key.slice(32, 64);\r\n\r\n        // Encrypt the private key\r\n        const counter = new aes.Counter(iv);\r\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\r\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\r\n\r\n        // Compute the message authentication code, used to check the password\r\n        const mac = keccak256(concat([macPrefix, ciphertext]))\r\n\r\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\r\n        const data: { [key: string]: any } = {\r\n            address: account.address.substring(2).toLowerCase(),\r\n            id: uuidV4(uuidRandom),\r\n            version: 3,\r\n            Crypto: {\r\n                cipher: \"aes-128-ctr\",\r\n                cipherparams: {\r\n                    iv: hexlify(iv).substring(2),\r\n                },\r\n                ciphertext: hexlify(ciphertext).substring(2),\r\n                kdf: \"scrypt\",\r\n                kdfparams: {\r\n                    salt: hexlify(salt).substring(2),\r\n                    n: N,\r\n                    dklen: 32,\r\n                    p: p,\r\n                    r: r\r\n                },\r\n                mac: mac.substring(2)\r\n            }\r\n        };\r\n\r\n        // If we have a mnemonic, encrypt it into the JSON wallet\r\n        if (entropy) {\r\n            const mnemonicIv = randomBytes(16);\r\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\r\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\r\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\r\n            const now = new Date();\r\n            const timestamp = (now.getUTCFullYear() + \"-\" +\r\n                               zpad(now.getUTCMonth() + 1, 2) + \"-\" +\r\n                               zpad(now.getUTCDate(), 2) + \"T\" +\r\n                               zpad(now.getUTCHours(), 2) + \"-\" +\r\n                               zpad(now.getUTCMinutes(), 2) + \"-\" +\r\n                               zpad(now.getUTCSeconds(), 2) + \".0Z\"\r\n                              );\r\n            data[\"x-ethers\"] = {\r\n                client: client,\r\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\r\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\r\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\r\n                path: path,\r\n                locale: locale,\r\n                version: \"0.1\"\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(data);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}