{"ast":null,"code":"/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n(function () {\n  // helper functions for that ctx\n  function write(buffer, offs) {\n    for (var i = 2; i < arguments.length; i++) {\n      for (var j = 0; j < arguments[i].length; j++) {\n        buffer[offs++] = arguments[i].charAt(j);\n      }\n    }\n  }\n\n  function byte2(w) {\n    return String.fromCharCode(w >> 8 & 255, w & 255);\n  }\n\n  function byte4(w) {\n    return String.fromCharCode(w >> 24 & 255, w >> 16 & 255, w >> 8 & 255, w & 255);\n  }\n\n  function byte2lsb(w) {\n    return String.fromCharCode(w & 255, w >> 8 & 255);\n  } // modified from original source to support NPM\n\n\n  var PNGlib = function (width, height, depth) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth; // pixel data and row filter identifier size\n\n    this.pix_size = height * (width + 1); // deflate header, pix_size, block headers, adler32 checksum\n\n    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4; // offsets and sizes of Png chunks\n\n    this.ihdr_offs = 0; // IHDR offset and size\n\n    this.ihdr_size = 4 + 4 + 13 + 4;\n    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n\n    this.plte_size = 4 + 4 + 3 * depth + 4;\n    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n\n    this.trns_size = 4 + 4 + depth + 4;\n    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n\n    this.idat_size = 4 + 4 + this.data_size + 4;\n    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n\n    this.iend_size = 4 + 4 + 4;\n    this.buffer_size = this.iend_offs + this.iend_size; // total PNG size\n\n    this.buffer = new Array();\n    this.palette = new Object();\n    this.pindex = 0;\n\n    var _crc32 = new Array(); // initialize buffer with zero bytes\n\n\n    for (var i = 0; i < this.buffer_size; i++) {\n      this.buffer[i] = \"\\x00\";\n    } // initialize non-zero elements\n\n\n    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND'); // initialize deflate header\n\n    var header = 8 + (7 << 4) << 8 | 3 << 6;\n    header += 31 - header % 31;\n    write(this.buffer, this.idat_offs + 8, byte2(header)); // initialize deflate block headers\n\n    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n      var size, bits;\n\n      if (i + 0xffff < this.pix_size) {\n        size = 0xffff;\n        bits = \"\\x00\";\n      } else {\n        size = this.pix_size - (i << 16) - i;\n        bits = \"\\x01\";\n      }\n\n      write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n    }\n    /* Create crc32 lookup table */\n\n\n    for (var i = 0; i < 256; i++) {\n      var c = i;\n\n      for (var j = 0; j < 8; j++) {\n        if (c & 1) {\n          c = -306674912 ^ c >> 1 & 0x7fffffff;\n        } else {\n          c = c >> 1 & 0x7fffffff;\n        }\n      }\n\n      _crc32[i] = c;\n    } // compute the index into a png for a given pixel\n\n\n    this.index = function (x, y) {\n      var i = y * (this.width + 1) + x + 1;\n      var j = this.idat_offs + 8 + 2 + 5 * Math.floor(i / 0xffff + 1) + i;\n      return j;\n    }; // convert a color and build up the palette\n\n\n    this.color = function (red, green, blue, alpha) {\n      alpha = alpha >= 0 ? alpha : 255;\n      var color = ((alpha << 8 | red) << 8 | green) << 8 | blue;\n\n      if (typeof this.palette[color] == \"undefined\") {\n        if (this.pindex == this.depth) return \"\\x00\";\n        var ndx = this.plte_offs + 8 + 3 * this.pindex;\n        this.buffer[ndx + 0] = String.fromCharCode(red);\n        this.buffer[ndx + 1] = String.fromCharCode(green);\n        this.buffer[ndx + 2] = String.fromCharCode(blue);\n        this.buffer[this.trns_offs + 8 + this.pindex] = String.fromCharCode(alpha);\n        this.palette[color] = String.fromCharCode(this.pindex++);\n      }\n\n      return this.palette[color];\n    }; // output a PNG string, Base64 encoded\n\n\n    this.getBase64 = function () {\n      var s = this.getDump();\n      var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n      var c1, c2, c3, e1, e2, e3, e4;\n      var l = s.length;\n      var i = 0;\n      var r = \"\";\n\n      do {\n        c1 = s.charCodeAt(i);\n        e1 = c1 >> 2;\n        c2 = s.charCodeAt(i + 1);\n        e2 = (c1 & 3) << 4 | c2 >> 4;\n        c3 = s.charCodeAt(i + 2);\n\n        if (l < i + 2) {\n          e3 = 64;\n        } else {\n          e3 = (c2 & 0xf) << 2 | c3 >> 6;\n        }\n\n        if (l < i + 3) {\n          e4 = 64;\n        } else {\n          e4 = c3 & 0x3f;\n        }\n\n        r += ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n      } while ((i += 3) < l);\n\n      return r;\n    }; // output a PNG string\n\n\n    this.getDump = function () {\n      // compute adler32 of output pixels + row filter bytes\n      var BASE = 65521;\n      /* largest prime smaller than 65536 */\n\n      var NMAX = 5552;\n      /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\n      var s1 = 1;\n      var s2 = 0;\n      var n = NMAX;\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = -1; x < this.width; x++) {\n          s1 += this.buffer[this.index(x, y)].charCodeAt(0);\n          s2 += s1;\n\n          if ((n -= 1) == 0) {\n            s1 %= BASE;\n            s2 %= BASE;\n            n = NMAX;\n          }\n        }\n      }\n\n      s1 %= BASE;\n      s2 %= BASE;\n      write(this.buffer, this.idat_offs + this.idat_size - 8, byte4(s2 << 16 | s1)); // compute crc32 of the PNG chunks\n\n      function crc32(png, offs, size) {\n        var crc = -1;\n\n        for (var i = 4; i < size - 4; i += 1) {\n          crc = _crc32[(crc ^ png[offs + i].charCodeAt(0)) & 0xff] ^ crc >> 8 & 0x00ffffff;\n        }\n\n        write(png, offs + size - 4, byte4(crc ^ -1));\n      }\n\n      crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n      crc32(this.buffer, this.plte_offs, this.plte_size);\n      crc32(this.buffer, this.trns_offs, this.trns_size);\n      crc32(this.buffer, this.idat_offs, this.idat_size);\n      crc32(this.buffer, this.iend_offs, this.iend_size); // convert PNG to string\n\n      return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n    };\n  }; // modified from original source to support NPM\n\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = PNGlib;\n  } else {\n    window.PNGlib = PNGlib;\n  }\n})();","map":{"version":3,"sources":["/Users/cengwenxin/Desktop/6883project/node_modules/identicon.js/pnglib.js"],"names":["write","buffer","offs","i","arguments","length","j","charAt","byte2","w","String","fromCharCode","byte4","byte2lsb","PNGlib","width","height","depth","pix_size","data_size","Math","floor","ihdr_offs","ihdr_size","plte_offs","plte_size","trns_offs","trns_size","idat_offs","idat_size","iend_offs","iend_size","buffer_size","Array","palette","Object","pindex","_crc32","header","size","bits","c","index","x","y","color","red","green","blue","alpha","ndx","getBase64","s","getDump","ch","c1","c2","c3","e1","e2","e3","e4","l","r","charCodeAt","BASE","NMAX","s1","s2","n","crc32","png","crc","join","module","exports","window"],"mappings":"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","sourcesContent":["/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n\n(function() {\n\n\t// helper functions for that ctx\n\tfunction write(buffer, offs) {\n\t\tfor (var i = 2; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tbuffer[offs++] = arguments[i].charAt(j);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction byte2(w) {\n\t\treturn String.fromCharCode((w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte4(w) {\n\t\treturn String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte2lsb(w) {\n\t\treturn String.fromCharCode(w & 255, (w >> 8) & 255);\n\t}\n\n\t// modified from original source to support NPM\n\tvar PNGlib = function(width,height,depth) {\n\n\t\tthis.width   = width;\n\t\tthis.height  = height;\n\t\tthis.depth   = depth;\n\n\t\t// pixel data and row filter identifier size\n\t\tthis.pix_size = height * (width + 1);\n\n\t\t// deflate header, pix_size, block headers, adler32 checksum\n\t\tthis.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t\t// offsets and sizes of Png chunks\n\t\tthis.ihdr_offs = 0;\t\t\t\t\t\t\t\t\t// IHDR offset and size\n\t\tthis.ihdr_size = 4 + 4 + 13 + 4;\n\t\tthis.plte_offs = this.ihdr_offs + this.ihdr_size;\t// PLTE offset and size\n\t\tthis.plte_size = 4 + 4 + 3 * depth + 4;\n\t\tthis.trns_offs = this.plte_offs + this.plte_size;\t// tRNS offset and size\n\t\tthis.trns_size = 4 + 4 + depth + 4;\n\t\tthis.idat_offs = this.trns_offs + this.trns_size;\t// IDAT offset and size\n\t\tthis.idat_size = 4 + 4 + this.data_size + 4;\n\t\tthis.iend_offs = this.idat_offs + this.idat_size;\t// IEND offset and size\n\t\tthis.iend_size = 4 + 4 + 4;\n\t\tthis.buffer_size  = this.iend_offs + this.iend_size;\t// total PNG size\n\n\t\tthis.buffer  = new Array();\n\t\tthis.palette = new Object();\n\t\tthis.pindex  = 0;\n\n\t\tvar _crc32 = new Array();\n\n\t\t// initialize buffer with zero bytes\n\t\tfor (var i = 0; i < this.buffer_size; i++) {\n\t\t\tthis.buffer[i] = \"\\x00\";\n\t\t}\n\n\t\t// initialize non-zero elements\n\t\twrite(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t\twrite(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t\twrite(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t\twrite(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t\twrite(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t\t// initialize deflate header\n\t\tvar header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t\theader+= 31 - (header % 31);\n\n\t\twrite(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t\t// initialize deflate block headers\n\t\tfor (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t\t\tvar size, bits;\n\t\t\tif (i + 0xffff < this.pix_size) {\n\t\t\t\tsize = 0xffff;\n\t\t\t\tbits = \"\\x00\";\n\t\t\t} else {\n\t\t\t\tsize = this.pix_size - (i << 16) - i;\n\t\t\t\tbits = \"\\x01\";\n\t\t\t}\n\t\t\twrite(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t\t}\n\n\t\t/* Create crc32 lookup table */\n\t\tfor (var i = 0; i < 256; i++) {\n\t\t\tvar c = i;\n\t\t\tfor (var j = 0; j < 8; j++) {\n\t\t\t\tif (c & 1) {\n\t\t\t\t\tc = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t\t\t\t} else {\n\t\t\t\t\tc = (c >> 1) & 0x7fffffff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_crc32[i] = c;\n\t\t}\n\n\t\t// compute the index into a png for a given pixel\n\t\tthis.index = function(x,y) {\n\t\t\tvar i = y * (this.width + 1) + x + 1;\n\t\t\tvar j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t\t\treturn j;\n\t\t}\n\n\t\t// convert a color and build up the palette\n\t\tthis.color = function(red, green, blue, alpha) {\n\n\t\t\talpha = alpha >= 0 ? alpha : 255;\n\t\t\tvar color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t\t\tif (typeof this.palette[color] == \"undefined\") {\n\t\t\t\tif (this.pindex == this.depth) return \"\\x00\";\n\n\t\t\t\tvar ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t\t\t\tthis.buffer[ndx + 0] = String.fromCharCode(red);\n\t\t\t\tthis.buffer[ndx + 1] = String.fromCharCode(green);\n\t\t\t\tthis.buffer[ndx + 2] = String.fromCharCode(blue);\n\t\t\t\tthis.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t\t\t\tthis.palette[color] = String.fromCharCode(this.pindex++);\n\t\t\t}\n\t\t\treturn this.palette[color];\n\t\t}\n\n\t\t// output a PNG string, Base64 encoded\n\t\tthis.getBase64 = function() {\n\n\t\t\tvar s = this.getDump();\n\n\t\t\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\tvar l = s.length;\n\t\t\tvar i = 0;\n\t\t\tvar r = \"\";\n\n\t\t\tdo {\n\t\t\t\tc1 = s.charCodeAt(i);\n\t\t\t\te1 = c1 >> 2;\n\t\t\t\tc2 = s.charCodeAt(i+1);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t\t\t\tc3 = s.charCodeAt(i+2);\n\t\t\t\tif (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t\t\t\tif (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t\t\t\tr+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t\t\t} while ((i+= 3) < l);\n\t\t\treturn r;\n\t\t}\n\n\t\t// output a PNG string\n\t\tthis.getDump = function() {\n\n\t\t\t// compute adler32 of output pixels + row filter bytes\n\t\t\tvar BASE = 65521; /* largest prime smaller than 65536 */\n\t\t\tvar NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t\t\tvar s1 = 1;\n\t\t\tvar s2 = 0;\n\t\t\tvar n = NMAX;\n\n\t\t\tfor (var y = 0; y < this.height; y++) {\n\t\t\t\tfor (var x = -1; x < this.width; x++) {\n\t\t\t\t\ts1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t\t\t\t\ts2+= s1;\n\t\t\t\t\tif ((n-= 1) == 0) {\n\t\t\t\t\t\ts1%= BASE;\n\t\t\t\t\t\ts2%= BASE;\n\t\t\t\t\t\tn = NMAX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts1%= BASE;\n\t\t\ts2%= BASE;\n\t\t\twrite(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t\t\t// compute crc32 of the PNG chunks\n\t\t\tfunction crc32(png, offs, size) {\n\t\t\t\tvar crc = -1;\n\t\t\t\tfor (var i = 4; i < size-4; i += 1) {\n\t\t\t\t\tcrc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t\t\t\t}\n\t\t\t\twrite(png, offs+size-4, byte4(crc ^ -1));\n\t\t\t}\n\n\t\t\tcrc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t\t\tcrc32(this.buffer, this.plte_offs, this.plte_size);\n\t\t\tcrc32(this.buffer, this.trns_offs, this.trns_size);\n\t\t\tcrc32(this.buffer, this.idat_offs, this.idat_size);\n\t\t\tcrc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t\t\t// convert PNG to string\n\t\t\treturn \"\\x89PNG\\r\\n\\x1a\\n\"+this.buffer.join('');\n\t\t}\n\t}\n\n\t// modified from original source to support NPM\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\tmodule.exports = PNGlib;\n\t} else {\n\t\twindow.PNGlib = PNGlib;\n\t}\n})();\n"]},"metadata":{},"sourceType":"script"}