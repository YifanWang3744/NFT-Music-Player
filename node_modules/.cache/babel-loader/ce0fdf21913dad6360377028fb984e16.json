{"ast":null,"code":"/**\r\n * var basex = require(\"base-x\");\r\n *\r\n * This implementation is heavily based on base-x. The main reason to\r\n * deviate was to prevent the dependency of Buffer.\r\n *\r\n * Contributors:\r\n *\r\n * base-x encoding\r\n * Forked from https://github.com/cryptocoinjs/bs58\r\n * Originally written by Mike Hearn for BitcoinJ\r\n * Copyright (c) 2011 Google Inc\r\n * Ported to JavaScript by Stefan Thomas\r\n * Merged Buffer refactorings from base58-native by Stephen Pair\r\n * Copyright (c) 2013 BitPay Inc\r\n *\r\n * The MIT License (MIT)\r\n *\r\n * Copyright base-x contributors (c) 2016\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n */\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nexport class BaseX {\n  constructor(alphabet) {\n    defineReadOnly(this, \"alphabet\", alphabet);\n    defineReadOnly(this, \"base\", alphabet.length);\n    defineReadOnly(this, \"_alphabetMap\", {});\n    defineReadOnly(this, \"_leader\", alphabet.charAt(0)); // pre-compute lookup table\n\n    for (let i = 0; i < alphabet.length; i++) {\n      this._alphabetMap[alphabet.charAt(i)] = i;\n    }\n  }\n\n  encode(value) {\n    let source = arrayify(value);\n\n    if (source.length === 0) {\n      return \"\";\n    }\n\n    let digits = [0];\n\n    for (let i = 0; i < source.length; ++i) {\n      let carry = source[i];\n\n      for (let j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = carry / this.base | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = carry / this.base | 0;\n      }\n    }\n\n    let string = \"\"; // deal with leading zeros\n\n    for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n      string += this._leader;\n    } // convert digits to a string\n\n\n    for (let q = digits.length - 1; q >= 0; --q) {\n      string += this.alphabet[digits[q]];\n    }\n\n    return string;\n  }\n\n  decode(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected String\");\n    }\n\n    let bytes = [];\n\n    if (value.length === 0) {\n      return new Uint8Array(bytes);\n    }\n\n    bytes.push(0);\n\n    for (let i = 0; i < value.length; i++) {\n      let byte = this._alphabetMap[value[i]];\n\n      if (byte === undefined) {\n        throw new Error(\"Non-base\" + this.base + \" character\");\n      }\n\n      let carry = byte;\n\n      for (let j = 0; j < bytes.length; ++j) {\n        carry += bytes[j] * this.base;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n      bytes.push(0);\n    }\n\n    return arrayify(new Uint8Array(bytes.reverse()));\n  }\n\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexport { Base32, Base58 }; //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))","map":{"version":3,"mappings":"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","names":["arrayify","defineReadOnly","BaseX","constructor","alphabet","length","charAt","i","_alphabetMap","encode","value","source","digits","carry","j","base","push","string","k","_leader","q","decode","TypeError","bytes","Uint8Array","byte","undefined","Error","reverse","Base32","Base58"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\basex\\src.ts\\index.ts"],"sourcesContent":["/**\r\n * var basex = require(\"base-x\");\r\n *\r\n * This implementation is heavily based on base-x. The main reason to\r\n * deviate was to prevent the dependency of Buffer.\r\n *\r\n * Contributors:\r\n *\r\n * base-x encoding\r\n * Forked from https://github.com/cryptocoinjs/bs58\r\n * Originally written by Mike Hearn for BitcoinJ\r\n * Copyright (c) 2011 Google Inc\r\n * Ported to JavaScript by Stefan Thomas\r\n * Merged Buffer refactorings from base58-native by Stephen Pair\r\n * Copyright (c) 2013 BitPay Inc\r\n *\r\n * The MIT License (MIT)\r\n *\r\n * Copyright base-x contributors (c) 2016\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n *\r\n */\r\n\r\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\n\r\nexport class BaseX {\r\n    readonly alphabet: string;\r\n    readonly base: number;\r\n\r\n    _alphabetMap: { [ character: string ]: number };\r\n    _leader: string;\r\n\r\n    constructor(alphabet: string) {\r\n        defineReadOnly(this, \"alphabet\", alphabet);\r\n        defineReadOnly(this, \"base\", alphabet.length);\r\n\r\n        defineReadOnly(this, \"_alphabetMap\", { });\r\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\r\n\r\n        // pre-compute lookup table\r\n        for (let i = 0; i < alphabet.length; i++) {\r\n            this._alphabetMap[alphabet.charAt(i)] = i;\r\n        }\r\n    }\r\n\r\n    encode(value: BytesLike): string {\r\n        let source = arrayify(value);\r\n\r\n        if (source.length === 0) { return \"\"; }\r\n\r\n        let digits = [ 0 ]\r\n        for (let i = 0; i < source.length; ++i) {\r\n            let carry = source[i];\r\n            for (let j = 0; j < digits.length; ++j) {\r\n                carry += digits[j] << 8;\r\n                digits[j] = carry % this.base;\r\n                carry = (carry / this.base) | 0;\r\n            }\r\n\r\n            while (carry > 0) {\r\n                digits.push(carry % this.base);\r\n                carry = (carry / this.base) | 0;\r\n            }\r\n        }\r\n\r\n        let string = \"\"\r\n\r\n        // deal with leading zeros\r\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\r\n            string += this._leader;\r\n        }\r\n\r\n        // convert digits to a string\r\n        for (let q = digits.length - 1; q >= 0; --q) {\r\n            string += this.alphabet[digits[q]];\r\n        }\r\n\r\n        return string;\r\n    }\r\n\r\n    decode(value: string): Uint8Array {\r\n        if (typeof(value) !== \"string\") {\r\n            throw new TypeError(\"Expected String\");\r\n        }\r\n\r\n        let bytes: Array<number> = [];\r\n        if (value.length === 0) { return new Uint8Array(bytes); }\r\n\r\n        bytes.push(0);\r\n        for (let i = 0; i < value.length; i++) {\r\n            let byte = this._alphabetMap[value[i]];\r\n\r\n            if (byte === undefined) {\r\n                throw new Error(\"Non-base\" + this.base + \" character\");\r\n            }\r\n\r\n            let carry = byte;\r\n            for (let j = 0; j < bytes.length; ++j) {\r\n                carry += bytes[j] * this.base;\r\n                bytes[j] = carry & 0xff;\r\n                carry >>= 8;\r\n            }\r\n\r\n            while (carry > 0) {\r\n                bytes.push(carry & 0xff);\r\n                carry >>= 8;\r\n            }\r\n        }\r\n\r\n        // deal with leading zeros\r\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\r\n            bytes.push(0)\r\n        }\r\n\r\n        return arrayify(new Uint8Array(bytes.reverse()))\r\n    }\r\n}\r\n\r\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\r\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\r\n\r\nexport { Base32, Base58 };\r\n\r\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\r\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\r\n"]},"metadata":{},"sourceType":"module"}