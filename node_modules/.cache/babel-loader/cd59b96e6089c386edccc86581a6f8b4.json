{"ast":null,"code":"\"use strict\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\n\nfunction decryptJsonWallet(json, password, progressCallback) {\n  if (isCrowdsaleWallet(json)) {\n    if (progressCallback) {\n      progressCallback(0);\n    }\n\n    const account = decryptCrowdsale(json, password);\n\n    if (progressCallback) {\n      progressCallback(1);\n    }\n\n    return Promise.resolve(account);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystore(json, password, progressCallback);\n  }\n\n  return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\n\nfunction decryptJsonWalletSync(json, password) {\n  if (isCrowdsaleWallet(json)) {\n    return decryptCrowdsale(json, password);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystoreSync(json, password);\n  }\n\n  throw new Error(\"invalid JSON wallet\");\n}\n\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync };","map":{"version":3,"mappings":"AAAA;;AAKA,SAASA,OAAO,IAAIC,gBAApB,QAA4C,aAA5C;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,EAAkDC,gBAAlD,QAA0E,WAA1E;AACA,SAASJ,OAAO,IAAIK,eAApB,EAAqCC,WAAW,IAAIC,mBAApD,EAAyEC,OAAO,IAAIC,eAApF,QAA6I,YAA7I;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAyCC,QAAzC,EAAmEC,gBAAnE,EAAsG;AAClG,MAAIV,iBAAiB,CAACQ,IAAD,CAArB,EAA6B;AACzB,QAAIE,gBAAJ,EAAsB;AAAEA,sBAAgB,CAAC,CAAD,CAAhB;AAAsB;;AAC9C,UAAMC,OAAO,GAAGb,gBAAgB,CAACU,IAAD,EAAOC,QAAP,CAAhC;;AACA,QAAIC,gBAAJ,EAAsB;AAAEA,sBAAgB,CAAC,CAAD,CAAhB;AAAsB;;AAC9C,WAAOE,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAP;AACH;;AAED,MAAIV,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AACxB,WAAON,eAAe,CAACM,IAAD,EAAOC,QAAP,EAAiBC,gBAAjB,CAAtB;AACH;;AAED,SAAOE,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACH;;AAED,SAASC,qBAAT,CAA+BR,IAA/B,EAA6CC,QAA7C,EAAqE;AACjE,MAAIT,iBAAiB,CAACQ,IAAD,CAArB,EAA6B;AACzB,WAAOV,gBAAgB,CAACU,IAAD,EAAOC,QAAP,CAAvB;AACH;;AAED,MAAIR,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AACxB,WAAOJ,mBAAmB,CAACI,IAAD,EAAOC,QAAP,CAA1B;AACH;;AAED,QAAM,IAAIM,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAED,SACIjB,gBADJ,EAGII,eAHJ,EAIIE,mBAJJ,EAKIE,eALJ,EAOIN,iBAPJ,EAQIC,gBARJ,EASIF,oBATJ,EAWIQ,iBAXJ,EAYIS,qBAZJ","names":["decrypt","decryptCrowdsale","getJsonWalletAddress","isCrowdsaleWallet","isKeystoreWallet","decryptKeystore","decryptSync","decryptKeystoreSync","encrypt","encryptKeystore","decryptJsonWallet","json","password","progressCallback","account","Promise","resolve","reject","Error","decryptJsonWalletSync"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\json-wallets\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Bytes } from \"@ethersproject/bytes\";\r\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\r\n\r\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\r\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\r\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore, EncryptOptions, ProgressCallback } from \"./keystore\";\r\n\r\nfunction decryptJsonWallet(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<ExternallyOwnedAccount> {\r\n    if (isCrowdsaleWallet(json)) {\r\n        if (progressCallback) { progressCallback(0); }\r\n        const account = decryptCrowdsale(json, password)\r\n        if (progressCallback) { progressCallback(1); }\r\n        return Promise.resolve(account);\r\n    }\r\n\r\n    if (isKeystoreWallet(json)) {\r\n        return decryptKeystore(json, password, progressCallback);\r\n    }\r\n\r\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\r\n}\r\n\r\nfunction decryptJsonWalletSync(json: string, password: Bytes | string): ExternallyOwnedAccount {\r\n    if (isCrowdsaleWallet(json)) {\r\n        return decryptCrowdsale(json, password)\r\n    }\r\n\r\n    if (isKeystoreWallet(json)) {\r\n        return decryptKeystoreSync(json, password);\r\n    }\r\n\r\n    throw new Error(\"invalid JSON wallet\");\r\n}\r\n\r\nexport {\r\n    decryptCrowdsale,\r\n\r\n    decryptKeystore,\r\n    decryptKeystoreSync,\r\n    encryptKeystore,\r\n\r\n    isCrowdsaleWallet,\r\n    isKeystoreWallet,\r\n    getJsonWalletAddress,\r\n\r\n    decryptJsonWallet,\r\n    decryptJsonWalletSync,\r\n\r\n    ProgressCallback,\r\n    EncryptOptions,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}