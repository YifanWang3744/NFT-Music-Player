{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\n\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // If still not set, set it\n\n\n        if (this._network == null) {\n          // A static network does not support \"any\"\n          defineReadOnly(this, \"_network\", network);\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return network;\n    });\n  }\n\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n  constructor(network, apiKey) {\n    logger.checkAbstract(new.target, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n    network = getStatic(new.target, \"getNetwork\")(network);\n    apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n    const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n    super(connection, network);\n\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(this, \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(key => {\n        defineReadOnly(this, key, apiKey[key]);\n      });\n    }\n  }\n\n  _startPending() {\n    logger.warn(\"WARNING: API provider does not support pending filters\");\n  }\n\n  isCommunityResource() {\n    return false;\n  }\n\n  getSigner(address) {\n    return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"getSigner\"\n    });\n  }\n\n  listAccounts() {\n    return Promise.resolve([]);\n  } // Return a defaultApiKey if null, otherwise validate the API key\n\n\n  static getApiKey(apiKey) {\n    return apiKey;\n  } // Returns the url or connection for the given network and API key. The\n  // API key will have been sanitized by the getApiKey first, so any validation\n  // or transformations can be done there.\n\n\n  static getUrl(network, apiKey) {\n    return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: \"getUrl\"\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineReadOnly","getStatic","Logger","version","logger","JsonRpcProvider","StaticJsonRpcProvider","detectNetwork","network","_super","call","throwError","errors","UNKNOWN_ERROR","_network","emit","UrlJsonRpcProvider","constructor","apiKey","checkAbstract","new","target","connection","Object","keys","forEach","key","_startPending","warn","isCommunityResource","getSigner","address","UNSUPPORTED_OPERATION","operation","listAccounts","Promise","resolve","getApiKey","getUrl","NOT_IMPLEMENTED"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\providers\\src.ts\\url-json-rpc-provider.ts"],"sourcesContent":["\r\n\"use strict\";\r\n\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\r\nimport { ConnectionInfo } from \"@ethersproject/web\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { CommunityResourcable } from \"./formatter\";\r\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\r\n\r\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\r\n\r\n// A StaticJsonRpcProvider is useful when you *know* for certain that\r\n// the backend will never change, as it never calls eth_chainId to\r\n// verify its backend. However, if the backend does change, the effects\r\n// are undefined and may include:\r\n// - inconsistent results\r\n// - locking up the UI\r\n// - block skew warnings\r\n// - wrong results\r\n// If the network is not explicit (i.e. auto-detection is expected), the\r\n// node MUST be running and available to respond to requests BEFORE this\r\n// is instantiated.\r\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\r\n    async detectNetwork(): Promise<Network> {\r\n        let network = this.network;\r\n        if (network == null) {\r\n            network = await super.detectNetwork();\r\n\r\n            if (!network) {\r\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\r\n            }\r\n\r\n            // If still not set, set it\r\n            if (this._network == null) {\r\n                // A static network does not support \"any\"\r\n                defineReadOnly(this, \"_network\", network);\r\n\r\n                this.emit(\"network\", network, null);\r\n            }\r\n        }\r\n        return network;\r\n    }\r\n}\r\n\r\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\r\n    readonly apiKey: any;\r\n\r\n    constructor(network?: Networkish, apiKey?: any) {\r\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\r\n\r\n        // Normalize the Network and API Key\r\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\r\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\r\n\r\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\r\n\r\n        super(connection, network);\r\n\r\n        if (typeof(apiKey) === \"string\") {\r\n            defineReadOnly(this, \"apiKey\", apiKey);\r\n        } else if (apiKey != null) {\r\n            Object.keys(apiKey).forEach((key) => {\r\n                defineReadOnly<any, any>(this, key, apiKey[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    _startPending(): void {\r\n        logger.warn(\"WARNING: API provider does not support pending filters\");\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getSigner(address?: string): JsonRpcSigner {\r\n        return logger.throwError(\r\n            \"API provider does not support signing\",\r\n            Logger.errors.UNSUPPORTED_OPERATION,\r\n            { operation: \"getSigner\" }\r\n        );\r\n    }\r\n\r\n    listAccounts(): Promise<Array<string>> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    // Return a defaultApiKey if null, otherwise validate the API key\r\n    static getApiKey(apiKey: any): any {\r\n        return apiKey;\r\n    }\r\n\r\n    // Returns the url or connection for the given network and API key. The\r\n    // API key will have been sanitized by the getApiKey first, so any validation\r\n    // or transformations can be done there.\r\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\r\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\r\n            operation: \"getUrl\"\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}