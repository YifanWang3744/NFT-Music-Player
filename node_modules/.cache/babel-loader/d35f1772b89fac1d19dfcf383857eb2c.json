{"ast":null,"code":"\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\"; ////////////////////////\n// Enums\n\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\"; ////////////////////////\n// Exports\n\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, ////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };","map":{"version":3,"mappings":"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","names":["AbiCoder","checkResultErrors","ConstructorFragment","defaultAbiCoder","ErrorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","Indexed","Interface","LogDescription","ParamType","TransactionDescription","getAddress","getCreate2Address","getContractAddress","getIcapAddress","isAddress","base64","Base58","base58","arrayify","concat","hexConcat","hexDataSlice","hexDataLength","hexlify","hexStripZeros","hexValue","hexZeroPad","isBytes","isBytesLike","isHexString","joinSignature","zeroPad","splitSignature","stripZeros","_TypedDataEncoder","hashMessage","id","isValidName","namehash","defaultPath","entropyToMnemonic","getAccountPath","HDNode","isValidMnemonic","mnemonicToEntropy","mnemonicToSeed","getJsonWalletAddress","keccak256","Logger","computeHmac","ripemd160","sha256","sha512","solidityKeccak256","pack","solidityPack","soliditySha256","randomBytes","shuffled","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","RLP","computePublicKey","recoverPublicKey","SigningKey","formatBytes32String","nameprep","parseBytes32String","_toEscapedUtf8String","toUtf8Bytes","toUtf8CodePoints","toUtf8String","Utf8ErrorFuncs","accessListify","computeAddress","parse","parseTransaction","recoverAddress","serialize","serializeTransaction","TransactionTypes","commify","formatEther","parseEther","formatUnits","parseUnits","verifyMessage","verifyTypedData","_fetchData","fetchJson","poll","SupportedAlgorithm","UnicodeNormalizationForm","Utf8ErrorReason"],"sources":["E:\\6883proj\\6883project\\node_modules\\ethers\\src.ts\\utils.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, Result, TransactionDescription }from \"@ethersproject/abi\";\r\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\r\nimport * as base64 from \"@ethersproject/base64\";\r\nimport { Base58 as base58 } from \"@ethersproject/basex\";\r\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\r\nimport { _TypedDataEncoder, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\r\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\r\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\r\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\r\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\r\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\r\nimport * as RLP from \"@ethersproject/rlp\";\r\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\r\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\r\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\r\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\r\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\r\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\r\n\r\n////////////////////////\r\n// Enums\r\n\r\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\r\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\r\nimport { UnsignedTransaction } from \"@ethersproject/transactions\";\r\n\r\n////////////////////////\r\n// Types and Interfaces\r\n\r\nimport { CoerceFunc } from \"@ethersproject/abi\";\r\nimport { Bytes, BytesLike, Hexable } from \"@ethersproject/bytes\"\r\nimport { Mnemonic } from \"@ethersproject/hdnode\";\r\nimport { EncryptOptions, ProgressCallback } from \"@ethersproject/json-wallets\";\r\nimport { Deferrable } from \"@ethersproject/properties\";\r\nimport { Utf8ErrorFunc } from \"@ethersproject/strings\";\r\nimport { AccessList, AccessListish } from \"@ethersproject/transactions\";\r\nimport { ConnectionInfo, FetchJsonResponse, OnceBlockable, OncePollable, PollOptions } from \"@ethersproject/web\";\r\n\r\n////////////////////////\r\n// Exports\r\n\r\nexport {\r\n    AbiCoder,\r\n    defaultAbiCoder,\r\n\r\n    Fragment,\r\n    ConstructorFragment,\r\n    ErrorFragment,\r\n    EventFragment,\r\n    FunctionFragment,\r\n    ParamType,\r\n    FormatTypes,\r\n\r\n    checkResultErrors,\r\n    Result,\r\n\r\n    Logger,\r\n\r\n    RLP,\r\n\r\n    _fetchData,\r\n    fetchJson,\r\n    poll,\r\n\r\n    checkProperties,\r\n    deepCopy,\r\n    defineReadOnly,\r\n    getStatic,\r\n    resolveProperties,\r\n    shallowCopy,\r\n\r\n    arrayify,\r\n\r\n    concat,\r\n    stripZeros,\r\n    zeroPad,\r\n\r\n    isBytes,\r\n    isBytesLike,\r\n\r\n    defaultPath,\r\n    HDNode,\r\n    SigningKey,\r\n\r\n    Interface,\r\n\r\n    LogDescription,\r\n    TransactionDescription,\r\n\r\n    base58,\r\n    base64,\r\n\r\n    hexlify,\r\n    isHexString,\r\n    hexConcat,\r\n    hexStripZeros,\r\n    hexValue,\r\n    hexZeroPad,\r\n    hexDataLength,\r\n    hexDataSlice,\r\n\r\n    nameprep,\r\n    _toEscapedUtf8String,\r\n    toUtf8Bytes,\r\n    toUtf8CodePoints,\r\n    toUtf8String,\r\n    Utf8ErrorFuncs,\r\n\r\n    formatBytes32String,\r\n    parseBytes32String,\r\n\r\n    hashMessage,\r\n    namehash,\r\n    isValidName,\r\n    id,\r\n\r\n    _TypedDataEncoder,\r\n\r\n    getAddress,\r\n    getIcapAddress,\r\n    getContractAddress,\r\n    getCreate2Address,\r\n    isAddress,\r\n\r\n    formatEther,\r\n    parseEther,\r\n\r\n    formatUnits,\r\n    parseUnits,\r\n\r\n    commify,\r\n\r\n    computeHmac,\r\n    keccak256,\r\n    ripemd160,\r\n    sha256,\r\n    sha512,\r\n\r\n    randomBytes,\r\n    shuffled,\r\n\r\n    solidityPack,\r\n    solidityKeccak256,\r\n    soliditySha256,\r\n\r\n    splitSignature,\r\n    joinSignature,\r\n\r\n    accessListify,\r\n    parseTransaction,\r\n    serializeTransaction,\r\n    TransactionTypes,\r\n\r\n    getJsonWalletAddress,\r\n\r\n    computeAddress,\r\n    recoverAddress,\r\n\r\n    computePublicKey,\r\n    recoverPublicKey,\r\n\r\n    verifyMessage,\r\n    verifyTypedData,\r\n\r\n    getAccountPath,\r\n    mnemonicToEntropy,\r\n    entropyToMnemonic,\r\n    isValidMnemonic,\r\n    mnemonicToSeed,\r\n\r\n\r\n    ////////////////////////\r\n    // Enums\r\n\r\n    SupportedAlgorithm,\r\n\r\n    UnicodeNormalizationForm,\r\n    Utf8ErrorReason,\r\n\r\n    ////////////////////////\r\n    // Types\r\n\r\n    Bytes,\r\n    BytesLike,\r\n    Hexable,\r\n\r\n    AccessList,\r\n    AccessListish,\r\n    UnsignedTransaction,\r\n\r\n    CoerceFunc,\r\n\r\n    Indexed,\r\n\r\n    Mnemonic,\r\n\r\n    Deferrable,\r\n\r\n    Utf8ErrorFunc,\r\n\r\n    ConnectionInfo,\r\n    OnceBlockable,\r\n    OncePollable,\r\n    PollOptions,\r\n    FetchJsonResponse,\r\n\r\n    EncryptOptions,\r\n    ProgressCallback\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}