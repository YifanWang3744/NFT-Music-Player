{"ast":null,"code":"var _jsxFileName = \"E:\\\\6883proj\\\\6883project\\\\src\\\\frontend\\\\components\\\\MyTokens.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyTokens(_ref) {\n  _s();\n\n  let {\n    contract\n  } = _ref;\n  const audioRefs = useRef([]);\n  const [isPlaying, setIsPlaying] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [myTokens, setMyTokens] = useState(null);\n  const [selected, setSelected] = useState(0);\n  const [previous, setPrevious] = useState(null);\n  const [resellId, setResellId] = useState(null);\n  const [resellPrice, setResellPrice] = useState(null);\n\n  const loadMyTokens = async () => {\n    // Get all unsold items/tokens\n    const results = await contract.getMyTokens();\n    const myTokens = await Promise.all(results.map(async i => {\n      // get uri url from contract\n      const uri = await contract.tokenURI(i.tokenId); // use uri to fetch the nft metadata stored on ipfs \n\n      const response = await fetch(uri + \".json\");\n      const metadata = await response.json(); // define item object\n\n      let item = {\n        price: i.price,\n        itemId: i.tokenId,\n        name: metadata.name,\n        audio: metadata.audio,\n        cover: metadata.cover,\n        resellPrice: null\n      };\n      return item;\n    }));\n    setMyTokens(myTokens);\n    setLoading(false);\n  };\n\n  const resellItem = async item => {\n    if (resellPrice === \"0\" || item.itemId !== resellId || !resellPrice) return; // Get royalty fee\n\n    const fee = await contract.royaltyFee();\n    const price = ethers.utils.parseEther(resellPrice.toString());\n    await (await contract.resellToken(item.itemId, price, {\n      value: fee\n    })).wait();\n    loadMyTokens();\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRefs.current[selected].play();\n      if (selected !== previous) audioRefs.current[previous].pause();\n    } else if (isPlaying !== null) {\n      audioRefs.current[selected].pause();\n    }\n  });\n  useEffect(() => {\n    !myTokens && loadMyTokens();\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: myTokens.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 container\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-5\",\n        children: myTokens.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n            src: item.audio,\n            ref: el => audioRefs.current[idx] = el\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.cover\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              color: \"secondary\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-grid px-4\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"secondary\",\n                  onClick: () => {\n                    setPrevious(selected);\n                    setSelected(idx);\n                    if (!isPlaying || idx === selected) setIsPlaying(!isPlaying);\n                  },\n                  children: isPlaying && selected === idx ? /*#__PURE__*/_jsxDEV(\"svg\", {\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    width: \"23\",\n                    height: \"23\",\n                    fill: \"currentColor\",\n                    className: \"bi bi-pause\",\n                    viewBox: \"0 0 16 16\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      d: \"M6 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    width: \"23\",\n                    height: \"23\",\n                    fill: \"currentColor\",\n                    className: \"bi bi-play\",\n                    viewBox: \"0 0 16 16\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      d: \"M10.804 8 5 4.633v6.734L10.804 8zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692z\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"mt-1\",\n                children: [ethers.utils.formatEther(item.price), \" ETH\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: /*#__PURE__*/_jsxDEV(InputGroup, {\n                className: \"my-1\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => resellItem(item),\n                  variant: \"outline-primary\",\n                  id: \"button-addon1\",\n                  children: \"Resell\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  onChange: e => {\n                    setResellId(item.itemId);\n                    setResellPrice(e.target.value);\n                  },\n                  size: \"md\",\n                  value: resellId === item.itemId ? resellPrice : '',\n                  required: true,\n                  type: \"number\",\n                  placeholder: \"Price in ETH\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No owned tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyTokens, \"CLt6c65+2VDHIgUOqqZYHsIPPhM=\");\n\n_c = MyTokens;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTokens\");","map":{"version":3,"sources":["E:/6883proj/6883project/src/frontend/components/MyTokens.js"],"names":["useState","useEffect","useRef","ethers","Row","Col","Card","Button","InputGroup","Form","MyTokens","contract","audioRefs","isPlaying","setIsPlaying","loading","setLoading","myTokens","setMyTokens","selected","setSelected","previous","setPrevious","resellId","setResellId","resellPrice","setResellPrice","loadMyTokens","results","getMyTokens","Promise","all","map","i","uri","tokenURI","tokenId","response","fetch","metadata","json","item","price","itemId","name","audio","cover","resellItem","fee","royaltyFee","utils","parseEther","toString","resellToken","value","wait","current","play","pause","padding","length","idx","el","formatEther","e","target"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap'\r\n\r\nexport default function MyTokens({ contract }) {\r\n  const audioRefs = useRef([]);\r\n  const [isPlaying, setIsPlaying] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [myTokens, setMyTokens] = useState(null)\r\n  const [selected, setSelected] = useState(0)\r\n  const [previous, setPrevious] = useState(null)\r\n  const [resellId, setResellId] = useState(null)\r\n  const [resellPrice, setResellPrice] = useState(null)\r\n  const loadMyTokens = async () => {\r\n    // Get all unsold items/tokens\r\n    const results = await contract.getMyTokens()\r\n    const myTokens = await Promise.all(results.map(async i => {\r\n      // get uri url from contract\r\n      const uri = await contract.tokenURI(i.tokenId)\r\n      // use uri to fetch the nft metadata stored on ipfs \r\n      const response = await fetch(uri + \".json\")\r\n      const metadata = await response.json()\r\n      // define item object\r\n      let item = {\r\n        price: i.price,\r\n        itemId: i.tokenId,\r\n        name: metadata.name,\r\n        audio: metadata.audio,\r\n        cover: metadata.cover,\r\n        resellPrice: null\r\n      }\r\n      return item\r\n    }))\r\n    setMyTokens(myTokens)\r\n    setLoading(false)\r\n  }\r\n  const resellItem = async (item) => {\r\n    if (resellPrice === \"0\" || item.itemId !== resellId || !resellPrice) return\r\n    // Get royalty fee\r\n    const fee = await contract.royaltyFee()\r\n    const price = ethers.utils.parseEther(resellPrice.toString())\r\n    await (await contract.resellToken(item.itemId, price, { value: fee })).wait()\r\n    loadMyTokens()\r\n  }\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      audioRefs.current[selected].play()\r\n      if (selected !== previous) audioRefs.current[previous].pause()\r\n    } else if (isPlaying !== null) {\r\n      audioRefs.current[selected].pause()\r\n    }\r\n\r\n  })\r\n  useEffect(() => {\r\n    !myTokens && loadMyTokens()\r\n  })\r\n\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      {myTokens.length > 0 ?\r\n        <div className=\"px-5 container\">\r\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n            {myTokens.map((item, idx) => (\r\n              <Col key={idx} className=\"overflow-hidden\">\r\n                <audio src={item.audio} key={idx} ref={el => audioRefs.current[idx] = el}></audio>\r\n                <Card>\r\n                  <Card.Img variant=\"top\" src={item.cover}/>\r\n                  <Card.Body color=\"secondary\">\r\n                    <Card.Title>{item.name}</Card.Title>\r\n                    <div className=\"d-grid px-4\">\r\n                      <Button variant=\"secondary\" onClick={() => {\r\n                        setPrevious(selected)\r\n                        setSelected(idx)\r\n                        if (!isPlaying || idx === selected) setIsPlaying(!isPlaying)\r\n                      }}>\r\n                        {isPlaying && selected === idx ? (\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"23\" height=\"23\" fill=\"currentColor\" className=\"bi bi-pause\" viewBox=\"0 0 16 16\">\r\n                            <path d=\"M6 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z\" />\r\n                          </svg>\r\n                        ) : (\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"23\" height=\"23\" fill=\"currentColor\" className=\"bi bi-play\" viewBox=\"0 0 16 16\">\r\n                            <path d=\"M10.804 8 5 4.633v6.734L10.804 8zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692z\" />\r\n                          </svg>\r\n                        )}\r\n                      </Button>\r\n                    </div>\r\n                    <Card.Text className=\"mt-1\">\r\n                      {ethers.utils.formatEther(item.price)} ETH\r\n                    </Card.Text>\r\n                  </Card.Body>\r\n                  <Card.Footer>\r\n                    <InputGroup className=\"my-1\">\r\n                      <Button onClick={() => resellItem(item)} variant=\"outline-primary\" id=\"button-addon1\">\r\n                        Resell\r\n                      </Button>\r\n                      <Form.Control\r\n                        onChange={(e) => {\r\n                          setResellId(item.itemId)\r\n                          setResellPrice(e.target.value)\r\n                        }}\r\n                        size=\"md\"\r\n                        value={resellId === item.itemId ? resellPrice : ''}\r\n                        required type=\"number\"\r\n                        placeholder=\"Price in ETH\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Card.Footer>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n        : (\r\n          <main style={{ padding: \"1rem 0\" }}>\r\n            <h2>No owned tokens</h2>\r\n          </main>\r\n        )}\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}