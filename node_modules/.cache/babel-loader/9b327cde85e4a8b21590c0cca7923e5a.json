{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\nexport function looseArrayify(hexString) {\n  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n    hexString = '0x' + hexString;\n  }\n\n  return arrayify(hexString);\n}\nexport function zpad(value, length) {\n  value = String(value);\n\n  while (value.length < length) {\n    value = '0' + value;\n  }\n\n  return value;\n}\nexport function getPassword(password) {\n  if (typeof password === 'string') {\n    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n  }\n\n  return arrayify(password);\n}\nexport function searchPath(object, path) {\n  let currentChild = object;\n  const comps = path.toLowerCase().split('/');\n\n  for (let i = 0; i < comps.length; i++) {\n    // Search for a child object with a case-insensitive matching key\n    let matchingChild = null;\n\n    for (const key in currentChild) {\n      if (key.toLowerCase() === comps[i]) {\n        matchingChild = currentChild[key];\n        break;\n      }\n    } // Didn't find one. :'(\n\n\n    if (matchingChild === null) {\n      return null;\n    } // Now check this child...\n\n\n    currentChild = matchingChild;\n  }\n\n  return currentChild;\n} // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n\nexport function uuidV4(randomBytes) {\n  const bytes = arrayify(randomBytes); // Section: 4.1.3:\n  // - time_hi_and_version[12:16] = 0b0100\n\n  bytes[6] = bytes[6] & 0x0f | 0x40; // Section 4.4\n  // - clock_seq_hi_and_reserved[6] = 0b0\n  // - clock_seq_hi_and_reserved[7] = 0b1\n\n  bytes[8] = bytes[8] & 0x3f | 0x80;\n  const value = hexlify(bytes);\n  return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join(\"-\");\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,EAAqCC,OAArC,QAAoD,sBAApD;AACA,SAASC,WAAT,EAAsBC,wBAAtB,QAAsD,wBAAtD;AAEA,OAAM,SAAUC,aAAV,CAAwBC,SAAxB,EAAyC;AAC3C,MAAI,OAAOA,SAAP,KAAsB,QAAtB,IAAkCA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,IAApE,EAA0E;AACtED,aAAS,GAAG,OAAOA,SAAnB;AACH;;AACD,SAAOL,QAAQ,CAACK,SAAD,CAAf;AACH;AAED,OAAM,SAAUE,IAAV,CAAeC,KAAf,EAAuCC,MAAvC,EAAqD;AACvDD,OAAK,GAAGE,MAAM,CAACF,KAAD,CAAd;;AACA,SAAOA,KAAK,CAACC,MAAN,GAAeA,MAAtB,EAA8B;AAAED,SAAK,GAAG,MAAMA,KAAd;AAAsB;;AACtD,SAAOA,KAAP;AACH;AAED,OAAM,SAAUG,WAAV,CAAsBC,QAAtB,EAA8C;AAChD,MAAI,OAAOA,QAAP,KAAqB,QAAzB,EAAmC;AAC/B,WAAOV,WAAW,CAACU,QAAD,EAAWT,wBAAwB,CAACU,IAApC,CAAlB;AACH;;AACD,SAAOb,QAAQ,CAACY,QAAD,CAAf;AACH;AAED,OAAM,SAAUE,UAAV,CAAqBC,MAArB,EAAkCC,IAAlC,EAA8C;AAChD,MAAIC,YAAY,GAAGF,MAAnB;AAEA,QAAMG,KAAK,GAAGF,IAAI,CAACG,WAAL,GAAmBC,KAAnB,CAAyB,GAAzB,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACT,MAA1B,EAAkCY,CAAC,EAAnC,EAAuC;AAEnC;AACA,QAAIC,aAAa,GAAG,IAApB;;AACA,SAAK,MAAMC,GAAX,IAAkBN,YAAlB,EAAgC;AAC3B,UAAIM,GAAG,CAACJ,WAAJ,OAAsBD,KAAK,CAACG,CAAD,CAA/B,EAAoC;AAChCC,qBAAa,GAAGL,YAAY,CAACM,GAAD,CAA5B;AACA;AACH;AACL,KATkC,CAWnC;;;AACA,QAAID,aAAa,KAAK,IAAtB,EAA4B;AACxB,aAAO,IAAP;AACH,KAdkC,CAgBnC;;;AACAL,gBAAY,GAAGK,aAAf;AACH;;AAED,SAAOL,YAAP;AACH,C,CAED;;AACA,OAAM,SAAUO,MAAV,CAAiBC,WAAjB,EAAuC;AACzC,QAAMC,KAAK,GAAG1B,QAAQ,CAACyB,WAAD,CAAtB,CADyC,CAGzC;AACA;;AACAC,OAAK,CAAC,CAAD,CAAL,GAAYA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B,CALyC,CAOzC;AACA;AACA;;AACAA,OAAK,CAAC,CAAD,CAAL,GAAYA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B;AAEA,QAAMlB,KAAK,GAAGP,OAAO,CAACyB,KAAD,CAArB;AAEA,SAAO,CACJlB,KAAK,CAACF,SAAN,CAAgB,CAAhB,EAAmB,EAAnB,CADI,EAEJE,KAAK,CAACF,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAFI,EAGJE,KAAK,CAACF,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAHI,EAIJE,KAAK,CAACF,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAJI,EAKJE,KAAK,CAACF,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CALI,EAMLqB,IANK,CAMA,GANA,CAAP;AAOH","names":["arrayify","hexlify","toUtf8Bytes","UnicodeNormalizationForm","looseArrayify","hexString","substring","zpad","value","length","String","getPassword","password","NFKC","searchPath","object","path","currentChild","comps","toLowerCase","split","i","matchingChild","key","uuidV4","randomBytes","bytes","join"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\json-wallets\\src.ts\\utils.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { arrayify, Bytes, BytesLike, hexlify } from \"@ethersproject/bytes\";\r\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\r\n\r\nexport function looseArrayify(hexString: string): Uint8Array {\r\n    if (typeof(hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\r\n        hexString = '0x' + hexString;\r\n    }\r\n    return arrayify(hexString);\r\n}\r\n\r\nexport function zpad(value: String | number, length: number): String {\r\n    value = String(value);\r\n    while (value.length < length) { value = '0' + value; }\r\n    return value;\r\n}\r\n\r\nexport function getPassword(password: Bytes | string): Uint8Array {\r\n    if (typeof(password) === 'string') {\r\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\r\n    }\r\n    return arrayify(password);\r\n}\r\n\r\nexport function searchPath(object: any, path: string): string {\r\n    let currentChild = object;\r\n\r\n    const comps = path.toLowerCase().split('/');\r\n    for (let i = 0; i < comps.length; i++) {\r\n\r\n        // Search for a child object with a case-insensitive matching key\r\n        let matchingChild = null;\r\n        for (const key in currentChild) {\r\n             if (key.toLowerCase() === comps[i]) {\r\n                 matchingChild = currentChild[key];\r\n                 break;\r\n             }\r\n        }\r\n\r\n        // Didn't find one. :'(\r\n        if (matchingChild === null) {\r\n            return null;\r\n        }\r\n\r\n        // Now check this child...\r\n        currentChild = matchingChild;\r\n    }\r\n\r\n    return currentChild;\r\n}\r\n\r\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\nexport function uuidV4(randomBytes: BytesLike): string {\r\n    const bytes = arrayify(randomBytes);\r\n\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const value = hexlify(bytes);\r\n\r\n    return [\r\n       value.substring(2, 10),\r\n       value.substring(10, 14),\r\n       value.substring(14, 18),\r\n       value.substring(18, 22),\r\n       value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}