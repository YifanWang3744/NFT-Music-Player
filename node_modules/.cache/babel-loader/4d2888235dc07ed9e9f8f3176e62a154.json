{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider) {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n\n      try {\n        const provider = new providers.PocketProvider(network);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\"\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\"\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\r\n *  getNetwork\r\n *\r\n *  Converts a named common networks or chain ID (network ID) to a Network\r\n *  and verifies a network is a valid Network..\r\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","skip","provider","indexOf","name","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\networks\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { Network, Networkish } from \"./types\";\r\n\r\nexport {\r\n    Network,\r\n    Networkish\r\n};\r\n\r\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\r\n\r\ninterface Renetworkable extends DefaultProviderFunc {\r\n    renetwork: (network: Network) => DefaultProviderFunc;\r\n};\r\n\r\nfunction isRenetworkable(value: any): value is Renetworkable {\r\n    return (value && typeof(value.renetwork) === \"function\");\r\n}\r\n\r\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\r\n    const func = function(providers: any, options?: any): any {\r\n        if (options == null) { options = { }; }\r\n        const providerList: Array<any> = [];\r\n\r\n        if (providers.InfuraProvider) {\r\n            try {\r\n                providerList.push(new providers.InfuraProvider(network, options.infura));\r\n            } catch(error) { }\r\n        }\r\n\r\n        if (providers.EtherscanProvider) {\r\n            try {\r\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\r\n            } catch(error) { }\r\n        }\r\n\r\n        if (providers.AlchemyProvider) {\r\n            try {\r\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\r\n            } catch(error) { }\r\n        }\r\n\r\n        if (providers.PocketProvider) {\r\n            // These networks are currently faulty on Pocket as their\r\n            // network does not handle the Berlin hardfork, which is\r\n            // live on these ones.\r\n            // @TODO: This goes away once Pocket has upgraded their nodes\r\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\" ];\r\n            try {\r\n                const provider = new providers.PocketProvider(network);\r\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\r\n                    providerList.push(provider);\r\n                }\r\n            } catch(error) { }\r\n        }\r\n\r\n        if (providers.CloudflareProvider) {\r\n            try {\r\n                providerList.push(new providers.CloudflareProvider(network));\r\n            } catch(error) { }\r\n        }\r\n\r\n        if (providerList.length === 0) { return null; }\r\n\r\n        if (providers.FallbackProvider) {\r\n            let quorum = 1;\r\n            if (options.quorum != null) {\r\n                quorum = options.quorum;\r\n            } else if (network === \"homestead\") {\r\n                quorum = 2;\r\n            }\r\n            return new providers.FallbackProvider(providerList, quorum);\r\n        }\r\n\r\n        return providerList[0];\r\n    };\r\n\r\n    func.renetwork = function(network: Network) {\r\n        return ethDefaultProvider(network);\r\n    };\r\n\r\n    return func;\r\n}\r\n\r\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\r\n    const func = function(providers: any, options?: any): any {\r\n        if (providers.JsonRpcProvider) {\r\n            return new providers.JsonRpcProvider(url, network);\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    func.renetwork = function(network: Network) {\r\n        return etcDefaultProvider(url, network);\r\n    };\r\n\r\n    return func;\r\n}\r\n\r\nconst homestead: Network = {\r\n    chainId: 1,\r\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n    name: \"homestead\",\r\n    _defaultProvider: ethDefaultProvider(\"homestead\")\r\n};\r\n\r\nconst ropsten: Network = {\r\n    chainId: 3,\r\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n    name: \"ropsten\",\r\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\r\n};\r\n\r\nconst classicMordor: Network = {\r\n    chainId: 63,\r\n    name: \"classicMordor\",\r\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\r\n};\r\n\r\n// See: https://chainlist.org\r\nconst networks: { [name: string]: Network } = {\r\n    unspecified: { chainId: 0, name: \"unspecified\" },\r\n\r\n    homestead: homestead,\r\n    mainnet: homestead,\r\n\r\n    morden: { chainId: 2, name: \"morden\" },\r\n\r\n    ropsten: ropsten,\r\n    testnet: ropsten,\r\n\r\n    rinkeby: {\r\n        chainId: 4,\r\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n        name: \"rinkeby\",\r\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\r\n    },\r\n\r\n    kovan: {\r\n        chainId: 42,\r\n        name: \"kovan\",\r\n        _defaultProvider: ethDefaultProvider(\"kovan\")\r\n    },\r\n\r\n    goerli: {\r\n        chainId: 5,\r\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n        name: \"goerli\",\r\n        _defaultProvider: ethDefaultProvider(\"goerli\")\r\n    },\r\n\r\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\r\n\r\n\r\n    // ETC (See: #351)\r\n    classic: {\r\n        chainId: 61,\r\n        name: \"classic\",\r\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\r\n    },\r\n\r\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\r\n\r\n    classicMordor: classicMordor,\r\n    classicTestnet: classicMordor,\r\n\r\n    classicKotti: {\r\n        chainId: 6,\r\n        name: \"classicKotti\",\r\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\r\n    },\r\n\r\n    xdai: { chainId: 100, name: \"xdai\" },\r\n\r\n    matic: { chainId: 137, name: \"matic\" },\r\n    maticmum: { chainId: 80001, name: \"maticmum\" },\r\n\r\n    optimism: { chainId: 10, name: \"optimism\" },\r\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\r\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\r\n\r\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\r\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\r\n\r\n    bnb: { chainId: 56, name: \"bnb\" },\r\n    bnbt: { chainId: 97, name: \"bnbt\" },\r\n}\r\n\r\n/**\r\n *  getNetwork\r\n *\r\n *  Converts a named common networks or chain ID (network ID) to a Network\r\n *  and verifies a network is a valid Network..\r\n */\r\nexport function getNetwork(network: Networkish): Network {\r\n    // No network (null)\r\n    if (network == null) { return null; }\r\n\r\n    if (typeof(network) === \"number\") {\r\n        for (const name in networks) {\r\n            const standard = networks[name];\r\n            if (standard.chainId === network) {\r\n                return {\r\n                    name: standard.name,\r\n                    chainId: standard.chainId,\r\n                    ensAddress: (standard.ensAddress || null),\r\n                    _defaultProvider: (standard._defaultProvider || null)\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            chainId: network,\r\n            name: \"unknown\"\r\n        };\r\n    }\r\n\r\n    if (typeof(network) === \"string\") {\r\n        const standard = networks[network];\r\n        if (standard == null) { return null; }\r\n        return {\r\n            name: standard.name,\r\n            chainId: standard.chainId,\r\n            ensAddress: standard.ensAddress,\r\n            _defaultProvider: (standard._defaultProvider || null)\r\n        };\r\n    }\r\n\r\n    const standard  = networks[network.name];\r\n\r\n    // Not a standard network; check that it is a valid network in general\r\n    if (!standard) {\r\n        if (typeof(network.chainId) !== \"number\") {\r\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\r\n        }\r\n        return network;\r\n    }\r\n\r\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\r\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\r\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\r\n    }\r\n\r\n    // @TODO: In the next major version add an attach function to a defaultProvider\r\n    // class and move the _defaultProvider internal to this file (extend Network)\r\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\r\n    if (defaultProvider == null && standard._defaultProvider) {\r\n        if (isRenetworkable(standard._defaultProvider)) {\r\n            defaultProvider = standard._defaultProvider.renetwork(network);\r\n        } else {\r\n            defaultProvider = standard._defaultProvider;\r\n        }\r\n    }\r\n\r\n    // Standard Network (allow overriding the ENS address)\r\n    return {\r\n        name: network.name,\r\n        chainId: standard.chainId,\r\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\r\n        _defaultProvider: defaultProvider\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}