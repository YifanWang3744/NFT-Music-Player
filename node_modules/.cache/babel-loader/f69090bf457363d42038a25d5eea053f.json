{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nexport function isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\n\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\n\nexport function isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n  const objects = items.map(item => arrayify(item));\n  const length = objects.reduce((accum, item) => accum + item.length, 0);\n  const result = new Uint8Array(length);\n  objects.reduce((offset, object) => {\n    result.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return addSlice(result);\n}\nexport function stripZeros(value) {\n  let result = arrayify(value);\n\n  if (result.length === 0) {\n    return result;\n  } // Find the first non-zero entry\n\n\n  let start = 0;\n\n  while (start < result.length && result[start] === 0) {\n    start++;\n  } // If we started with zeros, strip them\n\n\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\nexport function zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0xf] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (typeof value === \"bigint\") {\n    value = value.toString(16);\n\n    if (value.length % 2) {\n      return \"0x0\" + value;\n    }\n\n    return \"0x\" + value;\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\r\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\r\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\r\n        return \"0x0\" + value.substring(2);\r\n    }\r\n    return value;\r\n}\r\n*/\n\nexport function hexDataLength(data) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    return null;\n  }\n\n  return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n  }\n\n  offset = 2 + 2 * offset;\n\n  if (endOffset != null) {\n    return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n  }\n\n  return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n  let result = \"0x\";\n  items.forEach(item => {\n    result += hexlify(item).substring(2);\n  });\n  return result;\n}\nexport function hexValue(value) {\n  const trimmed = hexStripZeros(hexlify(value, {\n    hexPad: \"left\"\n  }));\n\n  if (trimmed === \"0x\") {\n    return \"0x0\";\n  }\n\n  return trimmed;\n}\nexport function hexStripZeros(value) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  }\n\n  if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  value = value.substring(2);\n  let offset = 0;\n\n  while (offset < value.length && value[offset] === \"0\") {\n    offset++;\n  }\n\n  return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\nexport function splitSignature(signature) {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute recoveryParam from v\n\n\n    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else {\n        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;\n\n        if (result.recoveryParam !== recId) {\n          logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n        }\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n}\nexport function joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? \"0x1c\" : \"0x1b\"]));\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isHexable","value","toHexString","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isBytesLike","isHexString","length","isBytes","isInteger","constructor","i","v","arrayify","options","checkSafeUint53","result","unshift","parseInt","String","push","allowMissingPrefix","substring","hex","hexPad","throwArgumentError","concat","items","objects","map","item","reduce","accum","offset","object","set","stripZeros","start","zeroPad","match","HexCharacters","hexlify","Math","floor","toString","toLowerCase","hexDataLength","data","hexDataSlice","endOffset","hexConcat","forEach","hexValue","trimmed","hexStripZeros","hexZeroPad","splitSignature","signature","r","s","_vs","recoveryParam","bytes","vs","recId","joinSignature"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\bytes\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n///////////////////////////////\r\n// Exported Types\r\n\r\nexport type Bytes = ArrayLike<number>;\r\n\r\nexport type BytesLike = Bytes | string;\r\n\r\nexport type DataOptions = {\r\n    allowMissingPrefix?: boolean;\r\n    hexPad?: \"left\" | \"right\" | null;\r\n};\r\n\r\nexport interface Hexable {\r\n    toHexString(): string;\r\n}\r\n\r\n\r\n/*\r\nexport interface HexString {\r\n    length: number;\r\n    substring: (start: number, end?: number) => string;\r\n\r\n    [index: number]: string;\r\n}\r\n*/\r\n\r\nexport type SignatureLike  = {\r\n    r: string;\r\n    s?: string;\r\n    _vs?: string,\r\n    recoveryParam?: number;\r\n    v?: number;\r\n} | BytesLike;\r\n\r\nexport interface Signature {\r\n    r: string;\r\n\r\n    s: string;\r\n    _vs: string,\r\n\r\n    recoveryParam: number;\r\n    v: number;\r\n}\r\n\r\n///////////////////////////////\r\n\r\n\r\nfunction isHexable(value: any): value is Hexable {\r\n    return !!(value.toHexString);\r\n}\r\n\r\nfunction addSlice(array: Uint8Array): Uint8Array {\r\n    if (array.slice) { return array; }\r\n\r\n    array.slice = function() {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport function isBytesLike(value: any): value is BytesLike {\r\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\r\n}\r\n\r\nfunction isInteger(value: number) {\r\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\r\n}\r\n\r\nexport function isBytes(value: any): value is Bytes {\r\n    if (value == null) { return false; }\r\n\r\n    if (value.constructor === Uint8Array) { return true; }\r\n    if (typeof(value) === \"string\") { return false; }\r\n    if (!isInteger(value.length) || value.length < 0) { return false; }\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\r\n    if (!options) { options = { }; }\r\n\r\n    if (typeof(value) === \"number\") {\r\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\r\n\r\n        const result = [];\r\n        while (value) {\r\n            result.unshift(value & 0xff);\r\n            value = parseInt(String(value / 256));\r\n        }\r\n        if (result.length === 0) { result.push(0); }\r\n\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n\r\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\r\n         value = \"0x\" + value;\r\n    }\r\n\r\n    if (isHexable(value)) { value = value.toHexString(); }\r\n\r\n    if (isHexString(value)) {\r\n        let hex = (<string>value).substring(2);\r\n        if (hex.length % 2) {\r\n            if (options.hexPad === \"left\") {\r\n                hex = \"0x0\" + hex.substring(2);\r\n            } else if (options.hexPad === \"right\") {\r\n                hex += \"0\";\r\n            } else {\r\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\r\n            }\r\n        }\r\n\r\n        const result = [];\r\n        for (let i = 0; i < hex.length; i += 2) {\r\n            result.push(parseInt(hex.substring(i, i + 2), 16));\r\n        }\r\n\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n\r\n    if (isBytes(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n\r\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\r\n}\r\n\r\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\r\n    const objects = items.map(item => arrayify(item));\r\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\r\n\r\n    const result = new Uint8Array(length);\r\n\r\n    objects.reduce((offset, object) => {\r\n        result.set(object, offset);\r\n        return offset + object.length;\r\n    }, 0);\r\n\r\n    return addSlice(result);\r\n}\r\n\r\nexport function stripZeros(value: BytesLike): Uint8Array {\r\n    let result: Uint8Array = arrayify(value);\r\n\r\n    if (result.length === 0) { return result; }\r\n\r\n    // Find the first non-zero entry\r\n    let start = 0;\r\n    while (start < result.length && result[start] === 0) { start++ }\r\n\r\n    // If we started with zeros, strip them\r\n    if (start) {\r\n        result = result.slice(start);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\r\n    value = arrayify(value);\r\n\r\n    if (value.length > length) {\r\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\r\n    }\r\n\r\n    const result = new Uint8Array(length);\r\n    result.set(value, length - value.length);\r\n    return addSlice(result);\r\n}\r\n\r\n\r\nexport function isHexString(value: any, length?: number): boolean {\r\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false\r\n    }\r\n    if (length && value.length !== 2 + 2 * length) { return false; }\r\n    return true;\r\n}\r\n\r\nconst HexCharacters: string = \"0123456789abcdef\";\r\n\r\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\r\n    if (!options) { options = { }; }\r\n\r\n    if (typeof(value) === \"number\") {\r\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\r\n\r\n        let hex = \"\";\r\n        while (value) {\r\n            hex = HexCharacters[value & 0xf] + hex;\r\n            value = Math.floor(value / 16);\r\n        }\r\n\r\n        if (hex.length) {\r\n            if (hex.length % 2) { hex = \"0\" + hex; }\r\n            return \"0x\" + hex;\r\n        }\r\n\r\n        return \"0x00\";\r\n    }\r\n\r\n    if (typeof(value) === \"bigint\") {\r\n        value = value.toString(16);\r\n        if (value.length % 2) { return (\"0x0\" + value); }\r\n        return \"0x\" + value;\r\n    }\r\n\r\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\r\n         value = \"0x\" + value;\r\n    }\r\n\r\n    if (isHexable(value)) { return value.toHexString(); }\r\n\r\n    if (isHexString(value)) {\r\n        if ((<string>value).length % 2) {\r\n            if (options.hexPad === \"left\") {\r\n                value = \"0x0\" + (<string>value).substring(2);\r\n            } else if (options.hexPad === \"right\") {\r\n                value += \"0\";\r\n            } else {\r\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\r\n            }\r\n        }\r\n        return (<string>value).toLowerCase();\r\n    }\r\n\r\n    if (isBytes(value)) {\r\n        let result = \"0x\";\r\n        for (let i = 0; i < value.length; i++) {\r\n             let v = value[i];\r\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\r\n}\r\n\r\n/*\r\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\r\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\r\n        return \"0x0\" + value.substring(2);\r\n    }\r\n    return value;\r\n}\r\n*/\r\nexport function hexDataLength(data: BytesLike) {\r\n    if (typeof(data) !== \"string\") {\r\n        data = hexlify(data);\r\n    } else if (!isHexString(data) || (data.length % 2)) {\r\n        return null;\r\n    }\r\n\r\n    return (data.length - 2) / 2;\r\n}\r\n\r\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\r\n    if (typeof(data) !== \"string\") {\r\n        data = hexlify(data);\r\n    } else if (!isHexString(data) || (data.length % 2)) {\r\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\r\n    }\r\n\r\n    offset = 2 + 2 * offset;\r\n\r\n    if (endOffset != null) {\r\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\r\n    }\r\n\r\n    return \"0x\" + data.substring(offset);\r\n}\r\n\r\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\r\n    let result = \"0x\";\r\n    items.forEach((item) => {\r\n        result += hexlify(item).substring(2);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\r\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\r\n    if (trimmed === \"0x\") { return \"0x0\"; }\r\n    return trimmed;\r\n}\r\n\r\nexport function hexStripZeros(value: BytesLike): string {\r\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\r\n\r\n    if (!isHexString(value)) {\r\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\r\n    }\r\n    value = value.substring(2);\r\n    let offset = 0;\r\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\r\n    return \"0x\" + value.substring(offset);\r\n}\r\n\r\nexport function hexZeroPad(value: BytesLike, length: number): string {\r\n    if (typeof(value) !== \"string\") {\r\n        value = hexlify(value);\r\n    } else if (!isHexString(value)) {\r\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\r\n    }\r\n\r\n    if (value.length > 2 * length + 2) {\r\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\r\n    }\r\n\r\n    while (value.length < 2 * length + 2) {\r\n        value = \"0x0\" + value.substring(2);\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function splitSignature(signature: SignatureLike): Signature {\r\n    const result = {\r\n        r: \"0x\",\r\n        s: \"0x\",\r\n        _vs: \"0x\",\r\n        recoveryParam: 0,\r\n        v: 0\r\n    };\r\n\r\n    if (isBytesLike(signature)) {\r\n        const bytes: Uint8Array = arrayify(signature);\r\n        if (bytes.length !== 65) {\r\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\r\n        }\r\n\r\n        // Get the r, s and v\r\n        result.r = hexlify(bytes.slice(0, 32));\r\n        result.s = hexlify(bytes.slice(32, 64));\r\n        result.v = bytes[64];\r\n\r\n        // Allow a recid to be used as the v\r\n        if (result.v < 27) {\r\n            if (result.v === 0 || result.v === 1) {\r\n                result.v += 27;\r\n            } else {\r\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\r\n            }\r\n        }\r\n\r\n        // Compute recoveryParam from v\r\n        result.recoveryParam = 1 - (result.v % 2);\r\n\r\n        // Compute _vs from recoveryParam and s\r\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\r\n        result._vs = hexlify(bytes.slice(32, 64))\r\n\r\n    } else {\r\n        result.r = signature.r;\r\n        result.s = signature.s;\r\n        result.v = signature.v;\r\n        result.recoveryParam = signature.recoveryParam;\r\n        result._vs = signature._vs;\r\n\r\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\r\n        // and verify non-missing s, v and recoveryParam\r\n        if (result._vs != null) {\r\n            const vs = zeroPad(arrayify(result._vs), 32);\r\n            result._vs = hexlify(vs);\r\n\r\n            // Set or check the recid\r\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\r\n            if (result.recoveryParam == null) {\r\n                result.recoveryParam = recoveryParam;\r\n            } else if (result.recoveryParam !== recoveryParam) {\r\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\r\n            }\r\n\r\n            // Set or check the s\r\n            vs[0] &= 0x7f;\r\n            const s = hexlify(vs);\r\n            if (result.s == null) {\r\n                result.s = s;\r\n            } else if (result.s !== s) {\r\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\r\n            }\r\n        }\r\n\r\n        // Use recid and v to populate each other\r\n        if (result.recoveryParam == null) {\r\n            if (result.v == null) {\r\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\r\n            } else if (result.v === 0 || result.v === 1) {\r\n                result.recoveryParam = result.v;\r\n            } else {\r\n                result.recoveryParam = 1 - (result.v % 2);\r\n            }\r\n        } else {\r\n            if (result.v == null) {\r\n                result.v = 27 + result.recoveryParam;\r\n            } else {\r\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\r\n                if (result.recoveryParam !== recId) {\r\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result.r == null || !isHexString(result.r)) {\r\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\r\n        } else {\r\n            result.r = hexZeroPad(result.r, 32);\r\n        }\r\n\r\n        if (result.s == null || !isHexString(result.s)) {\r\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\r\n        } else {\r\n            result.s = hexZeroPad(result.s, 32);\r\n        }\r\n\r\n        const vs = arrayify(result.s);\r\n        if (vs[0] >= 128) {\r\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\r\n        }\r\n        if (result.recoveryParam) { vs[0] |= 0x80; }\r\n        const _vs = hexlify(vs);\r\n\r\n        if (result._vs) {\r\n            if (!isHexString(result._vs)) {\r\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\r\n            }\r\n            result._vs = hexZeroPad(result._vs, 32);\r\n        }\r\n\r\n        // Set or check the _vs\r\n        if (result._vs == null) {\r\n            result._vs = _vs;\r\n        } else if (result._vs !== _vs) {\r\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function joinSignature(signature: SignatureLike): string {\r\n    signature = splitSignature(signature);\r\n\r\n    return hexlify(concat([\r\n         signature.r,\r\n         signature.s,\r\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\r\n    ]));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}