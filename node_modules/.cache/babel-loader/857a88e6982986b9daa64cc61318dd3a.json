{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; ///////////////////////////////\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true\n};\n\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n\n    if (typeof name !== \"string\") {\n      logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    } // If it is already an address, just use it (after adding checksum)\n\n\n    try {\n      return getAddress(name);\n    } catch (error) {}\n\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n\n    const address = yield resolver.resolveName(name);\n\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n  });\n} // Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\n\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"value\",\n          value\n        }));\n      }\n\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n  });\n}\n\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    } // Make sure the parameter count matches\n\n\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\"); // Populate \"from\" override (allow promises)\n\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from); //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    } // Wait for all dependencies to be resolved (prefer the signer over the provider)\n\n\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    }); // The ABI coded transaction\n\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    }; // Resolved Overrides\n\n    const ro = resolved.overrides; // Populate simple overrides\n\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n\n    if (ro.maxFeePerGas != null) {\n      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n    }\n\n    if (ro.maxPriorityFeePerGas != null) {\n      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n    }\n\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n\n    if (ro.type != null) {\n      tx.type = ro.type;\n    }\n\n    if (ro.accessList != null) {\n      tx.accessList = accessListify(ro.accessList);\n    } // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\n\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Compute the intrinsic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    } // Populate \"value\" override\n\n\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n\n      tx.value = roValue;\n    }\n\n    if (ro.customData) {\n      tx.customData = shallowCopy(ro.customData);\n    } // Remove the overrides\n\n\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    delete overrides.type;\n    delete overrides.accessList;\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n    delete overrides.customData; // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n\n    return tx;\n  });\n}\n\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return populateTransaction(contract, fragment, args);\n  };\n}\n\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\n\nfunction addContractWait(contract, tx) {\n  const wait = tx.wait.bind(tx);\n\n  tx.wait = confirmations => {\n    return wait(confirmations).then(receipt => {\n      receipt.events = receipt.logs.map(log => {\n        let event = deepCopy(log);\n        let parsed = null;\n\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {} // Successfully parsed the event log; include it\n\n\n        if (parsed) {\n          event.args = parsed.args;\n\n          event.decode = (data, topics) => {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        } // Useful operations\n\n\n        event.removeListener = () => {\n          return contract.provider;\n        };\n\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\n\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n\n        delete overrides.blockTag;\n        args.push(overrides);\n      } // If the contract was just deployed, wait until it is mined\n\n\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      } // Call a node and get the result\n\n\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n\n        throw error;\n      }\n    });\n  };\n}\n\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      } // If the contract was just deployed, wait until it is mined\n\n\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest); // Tweak the tx.wait so the receipt has extra properties\n\n      addContractWait(contract, tx);\n      return tx;\n    });\n  };\n}\n\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n\n  return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n\n    return topic;\n  }).join(\":\") : \"\");\n}\n\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n\n      done = true;\n      return false;\n    });\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n\n  listenerCount() {\n    return this._listeners.length;\n  }\n\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice(); // Call the callback in the next event loop\n\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0); // Reschedule it if it not \"once\"\n\n      return !item.once;\n    });\n    return listenerCount;\n  }\n\n  prepareEvent(event) {} // Returns the array that will be applied to an emit\n\n\n  getEmit(event) {\n    return [event];\n  }\n\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n\n} // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\n\n\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n\n    if (errors.length) {\n      throw errors[0].error;\n    }\n\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n\n} // A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\n\n\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n\n  prepareEvent(event) {\n    super.prepareEvent(event);\n\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n\n      event.args = parsed.args;\n    } catch (error) {// No matching event\n    }\n  }\n\n}\n\nexport class BaseContract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    var _this = this;\n\n    logger.checkNew(new.target, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          return {\n            address: _this.address,\n            topics: _this.interface.encodeFilterTopics(event, args)\n          };\n        });\n\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n\n    defineReadOnly(this, \"address\", addressOrName);\n\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n\n      uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n\n      {\n        const name = fragment.name;\n\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n\n        uniqueNames[`%${name}`].push(signature);\n      }\n\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      } // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n\n\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n\n      if (signatures.length > 1) {\n        return;\n      } // Strip off the leading \"%\" used for prototype protection\n\n\n      name = name.substring(1);\n      const signature = signatures[0]; // If overwriting a member property that is null, swallow the error\n\n      try {\n        if (this[name] == null) {\n          defineReadOnly(this, name, this[signature]);\n        }\n      } catch (e) {}\n\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n\n    return new Interface(contractInterface);\n  } // @TODO: Allow timeout?\n\n\n  deployed() {\n    return this._deployed();\n  }\n\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n\n          return this;\n        });\n      }\n    }\n\n    return this._deployedPromise;\n  } // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  } // Reconnect to a different signer or provider\n\n\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n\n    return contract;\n  } // Re-attach to a different on-chain instance of this contract\n\n\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n\n    return runningEvent;\n  }\n\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      } // Listen for any event that is registered\n\n\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      } // Listen for any event\n\n\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      } // Get the event Fragment (throws if ambiguous/unknown event)\n\n\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    } // We have topics to filter by...\n\n\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {} // Filter by the unknown topichash\n\n\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it\n\n      const emit = this._wrappedEmits[runningEvent.tag];\n\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  } // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n\n\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n\n      runningEvent.removeListener(listener);\n\n      this._checkRunningEvents(runningEvent);\n    };\n\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    }; // This may throw if the topics and data mismatch the signature\n\n\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n\n    runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)\n\n    this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling\n\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...\n\n\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        } // Always emit \"event\" for fragment-base events\n\n\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        } // Emit \"error\" if there was an error\n\n\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like \"error\" do not have a filter\n\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n\n    const filter = shallowCopy(runningEvent.filter);\n\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n\n    return this;\n  }\n\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n\n    return this;\n  }\n\n  emit(eventName) {\n    if (!this.provider) {\n      return false;\n    }\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      args[_key6 - 1] = arguments[_key6];\n    }\n\n    const result = runningEvent.run(args) > 0; // May have drained all the \"once\" events; check for living events\n\n    this._checkRunningEvents(runningEvent);\n\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n\n    if (eventName == null) {\n      const result = [];\n\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n\n      return result;\n    }\n\n    return this._getRunningEvent(eventName).listeners();\n  }\n\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n\n        this._checkRunningEvents(runningEvent);\n      }\n\n      return this;\n    } // Delete any listeners\n\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    runningEvent.removeAllListeners();\n\n    this._checkRunningEvents(runningEvent);\n\n    return this;\n  }\n\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    runningEvent.removeListener(listener);\n\n    this._checkRunningEvents(runningEvent);\n\n    return this;\n  }\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n}\nexport class Contract extends BaseContract {}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    } // Make sure it is 0x prefixed\n\n\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    } // Make sure the final result is valid bytecode\n\n\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    } // If we have a signer, make sure it is valid\n\n\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  } // @TODO: Future; rename to populateTransaction?\n\n\n  getDeployTransaction() {\n    let tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    } // Do not allow these to be overridden in a deployment transaction\n\n\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: tx.value\n        });\n      }\n    } // Make sure the call matches the constructor signature\n\n\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Set the data to the bytecode + the encoded constructor arguments\n\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n\n  deploy() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      } // Make sure the call matches the constructor signature\n\n\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Resolve ENS names and promises in the arguments\n\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides); // Get the deployment transaction (with optional overrides)\n\n      const unsignedTx = this.getDeployTransaction(...params); // Send the deployment transaction\n\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer); // Add the modified wait that wraps events\n\n      addContractWait(contract, tx);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n\n    return new this(abi, bytecode, signer);\n  }\n\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","value","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","resolveName","resolver","nameOrPromise","name","throwArgumentError","error","throwError","errors","UNSUPPORTED_OPERATION","operation","address","resolveAddresses","paramType","Array","isArray","Promise","all","map","index","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","then","check","__awaiter","provider","resolved","resolvedAddress","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","result","call","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","buildDefault","constant","getEventTag","topic","RunningEvent","constructor","tag","_listeners","addListener","listener","once","done","item","removeAllListeners","listeners","listenerCount","run","argsCopy","slice","setTimeout","apply","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","WildcardRunningEvent","BaseContract","addressOrName","checkNew","new","target","Contract","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","getInterface","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","Error","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","reduce","accum","ContractFactory","bytecode","bytecodeHex","object","getDeployTransaction","deploy","encodeDeploy","params","unsignedTx","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","parse","abi","evm"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\contracts\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\r\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\r\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\r\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\r\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\r\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\r\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\n\r\nconst logger = new Logger(version);\r\n\r\nexport interface Overrides {\r\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\r\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\r\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\r\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\r\n    nonce?: BigNumberish | Promise<BigNumberish>;\r\n    type?: number;\r\n    accessList?: AccessListish;\r\n    customData?: Record<string, any>;\r\n};\r\n\r\nexport interface PayableOverrides extends Overrides {\r\n    value?: BigNumberish | Promise<BigNumberish>;\r\n}\r\n\r\nexport interface CallOverrides extends PayableOverrides {\r\n    blockTag?: BlockTag | Promise<BlockTag>;\r\n    from?: string | Promise<string>;\r\n}\r\n\r\n// @TODO: Better hierarchy with: (in v6)\r\n//  - abstract-provider:TransactionRequest\r\n//  - transactions:Transaction\r\n//  - transaction:UnsignedTransaction\r\n\r\nexport interface PopulatedTransaction {\r\n    to?: string;\r\n    from?: string;\r\n    nonce?: number;\r\n\r\n    gasLimit?: BigNumber;\r\n    gasPrice?: BigNumber;\r\n\r\n    data?: string;\r\n    value?: BigNumber;\r\n    chainId?: number;\r\n\r\n    type?: number;\r\n    accessList?: AccessList;\r\n\r\n    maxFeePerGas?: BigNumber;\r\n    maxPriorityFeePerGas?: BigNumber;\r\n\r\n    customData?: Record<string, any>;\r\n};\r\n\r\nexport type EventFilter = {\r\n    address?: string;\r\n    topics?: Array<string|Array<string>>;\r\n};\r\n\r\n\r\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\r\n\r\n\r\n// The (n + 1)th parameter passed to contract event callbacks\r\nexport interface Event extends Log {\r\n\r\n    // The event name\r\n    event?: string;\r\n\r\n    // The event signature\r\n    eventSignature?: string;\r\n\r\n    // The parsed arguments to the event\r\n    args?: Result;\r\n\r\n    // If parsing the arguments failed, this is the error\r\n    decodeError?: Error;\r\n\r\n    // A function that can be used to decode event data and topics\r\n    decode?: (data: string, topics?: Array<string>) => any;\r\n\r\n    // A function that will remove the listener responsible for this event (if any)\r\n    removeListener: () => void;\r\n\r\n    // Get blockchain details about this event's block and transaction\r\n    getBlock: () => Promise<Block>;\r\n    getTransaction: () => Promise<TransactionResponse>;\r\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\r\n}\r\n\r\nexport interface ContractReceipt extends TransactionReceipt {\r\n    events?: Array<Event>;\r\n}\r\n\r\nexport interface ContractTransaction extends TransactionResponse {\r\n    wait(confirmations?: number): Promise<ContractReceipt>;\r\n}\r\n\r\n///////////////////////////////\r\n\r\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\r\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\r\n    type: true, accessList: true,\r\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\r\n    customData: true\r\n}\r\n\r\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\r\n    const name = await nameOrPromise;\r\n\r\n    if (typeof(name) !== \"string\") {\r\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\r\n    }\r\n\r\n    // If it is already an address, just use it (after adding checksum)\r\n    try {\r\n        return getAddress(name);\r\n    } catch (error) { }\r\n\r\n    if (!resolver) {\r\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"resolveName\"\r\n        });\r\n    }\r\n\r\n    const address = await resolver.resolveName(name);\r\n\r\n    if (address == null) {\r\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\r\n    }\r\n\r\n    return address;\r\n}\r\n\r\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\r\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\r\n    if (Array.isArray(paramType)) {\r\n        return await Promise.all(paramType.map((paramType, index) => {\r\n            return resolveAddresses(\r\n                resolver,\r\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\r\n                paramType\r\n            );\r\n        }));\r\n    }\r\n\r\n    if (paramType.type === \"address\") {\r\n        return await resolveName(resolver, value);\r\n    }\r\n\r\n    if (paramType.type === \"tuple\") {\r\n        return await resolveAddresses(resolver, value, paramType.components);\r\n    }\r\n\r\n    if (paramType.baseType === \"array\") {\r\n        if (!Array.isArray(value)) {\r\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\r\n                argument: \"value\",\r\n                value\r\n            }));\r\n        }\r\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\r\n    // If an extra argument is given, it is overrides\r\n    let overrides: CallOverrides = { };\r\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\r\n        overrides = shallowCopy(args.pop());\r\n    }\r\n\r\n    // Make sure the parameter count matches\r\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\r\n\r\n    // Populate \"from\" override (allow promises)\r\n    if (contract.signer) {\r\n        if (overrides.from) {\r\n            // Contracts with a Signer are from the Signer's frame-of-reference;\r\n            // but we allow overriding \"from\" if it matches the signer\r\n            overrides.from = resolveProperties({\r\n                override: resolveName(contract.signer, overrides.from),\r\n                signer: contract.signer.getAddress()\r\n            }).then(async (check) => {\r\n                if (getAddress(check.signer) !== check.override) {\r\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                        operation: \"overrides.from\"\r\n                    });\r\n                }\r\n\r\n                return check.override;\r\n            });\r\n\r\n        } else {\r\n            overrides.from = contract.signer.getAddress();\r\n        }\r\n\r\n    } else if (overrides.from) {\r\n        overrides.from = resolveName(contract.provider, overrides.from);\r\n\r\n    //} else {\r\n        // Contracts without a signer can override \"from\", and if\r\n        // unspecified the zero address is used\r\n        //overrides.from = AddressZero;\r\n    }\r\n\r\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\r\n    const resolved = await resolveProperties({\r\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\r\n        address: contract.resolvedAddress,\r\n        overrides: (resolveProperties(overrides) || { })\r\n    });\r\n\r\n    // The ABI coded transaction\r\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\r\n    const tx: PopulatedTransaction = {\r\n      data: data,\r\n      to: resolved.address\r\n    };\r\n\r\n    // Resolved Overrides\r\n    const ro = resolved.overrides;\r\n\r\n    // Populate simple overrides\r\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\r\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\r\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\r\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\r\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\r\n    if (ro.from != null) { tx.from = ro.from; }\r\n\r\n    if (ro.type != null) { tx.type = ro.type; }\r\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\r\n\r\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\r\n    if (tx.gasLimit == null && fragment.gas != null) {\r\n        // Compute the intrinsic gas cost for this transaction\r\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\r\n        // we may wish to parameterize in v6 as part of the Network object. Since this\r\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\r\n        // similar logic to the ContractFactory.\r\n        let intrinsic = 21000;\r\n        const bytes = arrayify(data);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            intrinsic += 4;\r\n            if (bytes[i]) { intrinsic += 64; }\r\n        }\r\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\r\n    }\r\n\r\n    // Populate \"value\" override\r\n    if (ro.value) {\r\n        const roValue = BigNumber.from(ro.value);\r\n        if (!roValue.isZero() && !fragment.payable) {\r\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"overrides.value\",\r\n                value: overrides.value\r\n            });\r\n        }\r\n        tx.value = roValue;\r\n    }\r\n\r\n    if (ro.customData) {\r\n        tx.customData = shallowCopy(ro.customData);\r\n    }\r\n\r\n    // Remove the overrides\r\n    delete overrides.nonce;\r\n    delete overrides.gasLimit;\r\n    delete overrides.gasPrice;\r\n    delete overrides.from;\r\n    delete overrides.value;\r\n\r\n    delete overrides.type;\r\n    delete overrides.accessList;\r\n\r\n    delete overrides.maxFeePerGas;\r\n    delete overrides.maxPriorityFeePerGas;\r\n\r\n    delete overrides.customData;\r\n\r\n    // Make sure there are no stray overrides, which may indicate a\r\n    // typo or using an unsupported key.\r\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\r\n    if (leftovers.length) {\r\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"overrides\",\r\n            overrides: leftovers\r\n        });\r\n    }\r\n\r\n    return tx;\r\n}\r\n\r\n\r\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\r\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\r\n        return populateTransaction(contract, fragment, args);\r\n    };\r\n}\r\n\r\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\r\n    const signerOrProvider = (contract.signer || contract.provider);\r\n    return async function(...args: Array<any>): Promise<BigNumber> {\r\n        if (!signerOrProvider) {\r\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"estimateGas\"\r\n            })\r\n        }\r\n\r\n        const tx = await populateTransaction(contract, fragment, args);\r\n        return await signerOrProvider.estimateGas(tx);\r\n    };\r\n}\r\n\r\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\r\n    const wait = tx.wait.bind(tx);\r\n    tx.wait = (confirmations?: number) => {\r\n        return wait(confirmations).then((receipt: ContractReceipt) => {\r\n            receipt.events = receipt.logs.map((log) => {\r\n                let event: Event = (<Event>deepCopy(log));\r\n                let parsed: LogDescription = null;\r\n                try {\r\n                    parsed = contract.interface.parseLog(log);\r\n                } catch (e){ }\r\n\r\n                // Successfully parsed the event log; include it\r\n                if (parsed) {\r\n                    event.args = parsed.args;\r\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\r\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\r\n                    };\r\n                    event.event = parsed.name;\r\n                    event.eventSignature = parsed.signature;\r\n                }\r\n\r\n                // Useful operations\r\n                event.removeListener = () => { return contract.provider; }\r\n                event.getBlock = () => {\r\n                    return contract.provider.getBlock(receipt.blockHash);\r\n                }\r\n                event.getTransaction = () => {\r\n                    return contract.provider.getTransaction(receipt.transactionHash);\r\n                }\r\n                event.getTransactionReceipt = () => {\r\n                    return Promise.resolve(receipt);\r\n                }\r\n\r\n                return event;\r\n            });\r\n\r\n            return receipt;\r\n        });\r\n    };\r\n}\r\n\r\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\r\n    const signerOrProvider = (contract.signer || contract.provider);\r\n\r\n    return async function(...args: Array<any>): Promise<any> {\r\n        // Extract the \"blockTag\" override if present\r\n        let blockTag = undefined;\r\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\r\n            const overrides = shallowCopy(args.pop());\r\n            if (overrides.blockTag != null) {\r\n                blockTag = await overrides.blockTag;\r\n            }\r\n            delete overrides.blockTag;\r\n            args.push(overrides);\r\n        }\r\n\r\n        // If the contract was just deployed, wait until it is mined\r\n        if (contract.deployTransaction != null) {\r\n            await contract._deployed(blockTag);\r\n        }\r\n\r\n        // Call a node and get the result\r\n        const tx = await populateTransaction(contract, fragment, args);\r\n        const result = await signerOrProvider.call(tx, blockTag);\r\n\r\n        try {\r\n            let value = contract.interface.decodeFunctionResult(fragment, result);\r\n            if (collapseSimple && fragment.outputs.length === 1) {\r\n                value = value[0];\r\n            }\r\n            return value;\r\n\r\n        } catch (error) {\r\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\r\n                error.address = contract.address;\r\n                error.args = args;\r\n                error.transaction = tx;\r\n            }\r\n            throw error;\r\n         }\r\n    };\r\n}\r\n\r\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\r\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\r\n        if (!contract.signer) {\r\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"sendTransaction\"\r\n            })\r\n        }\r\n\r\n        // If the contract was just deployed, wait until it is mined\r\n        if (contract.deployTransaction != null) {\r\n            await contract._deployed();\r\n        }\r\n\r\n        const txRequest = await populateTransaction(contract, fragment, args);\r\n\r\n        const tx = await contract.signer.sendTransaction(txRequest);\r\n\r\n        // Tweak the tx.wait so the receipt has extra properties\r\n        addContractWait(contract, tx);\r\n\r\n        return tx;\r\n    };\r\n}\r\n\r\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\r\n    if (fragment.constant) {\r\n        return buildCall(contract, fragment, collapseSimple);\r\n    }\r\n    return buildSend(contract, fragment);\r\n}\r\n\r\nfunction getEventTag(filter: EventFilter): string {\r\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\r\n        return \"*\";\r\n    }\r\n\r\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\r\n        if (Array.isArray(topic)) {\r\n            return topic.join(\"|\");\r\n        }\r\n        return topic;\r\n    }).join(\":\"): \"\");\r\n}\r\n\r\nclass RunningEvent {\r\n    readonly tag: string;\r\n    readonly filter: EventFilter;\r\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\r\n\r\n    constructor(tag: string, filter: EventFilter) {\r\n        defineReadOnly(this, \"tag\", tag);\r\n        defineReadOnly(this, \"filter\", filter);\r\n        this._listeners = [ ];\r\n    }\r\n\r\n    addListener(listener: Listener, once: boolean): void {\r\n        this._listeners.push({ listener: listener, once: once });\r\n    }\r\n\r\n    removeListener(listener: Listener): void {\r\n        let done = false;\r\n        this._listeners = this._listeners.filter((item) => {\r\n            if (done || item.listener !== listener) { return true; }\r\n            done = true;\r\n            return false;\r\n        });\r\n    }\r\n\r\n    removeAllListeners(): void {\r\n        this._listeners = [];\r\n    }\r\n\r\n    listeners(): Array<Listener> {\r\n        return this._listeners.map((i) => i.listener);\r\n    }\r\n\r\n    listenerCount(): number {\r\n        return this._listeners.length;\r\n    }\r\n\r\n    run(args: Array<any>): number {\r\n        const listenerCount = this.listenerCount();\r\n        this._listeners = this._listeners.filter((item) => {\r\n\r\n            const argsCopy = args.slice();\r\n\r\n            // Call the callback in the next event loop\r\n            setTimeout(() => {\r\n                item.listener.apply(this, argsCopy);\r\n            }, 0);\r\n\r\n            // Reschedule it if it not \"once\"\r\n            return !(item.once);\r\n        });\r\n\r\n        return listenerCount;\r\n    }\r\n\r\n    prepareEvent(event: Event): void {\r\n    }\r\n\r\n    // Returns the array that will be applied to an emit\r\n    getEmit(event: Event): Array<any> {\r\n        return [ event ];\r\n    }\r\n}\r\n\r\nclass ErrorRunningEvent extends RunningEvent {\r\n    constructor() {\r\n        super(\"error\", null);\r\n    }\r\n}\r\n\r\n\r\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\r\n//       or have a common abstract super class, with enough constructor\r\n//       options to configure both.\r\n\r\n// A Fragment Event will populate all the properties that Wildcard\r\n// will, and additionally dereference the arguments when emitting\r\nclass FragmentRunningEvent extends RunningEvent {\r\n    readonly address: string;\r\n    readonly interface: Interface;\r\n    readonly fragment: EventFragment;\r\n\r\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\r\n        const filter: EventFilter = {\r\n            address: address\r\n        }\r\n\r\n        let topic = contractInterface.getEventTopic(fragment);\r\n        if (topics) {\r\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\r\n            filter.topics = topics.slice();\r\n        } else {\r\n            filter.topics = [ topic ];\r\n        }\r\n\r\n        super(getEventTag(filter), filter);\r\n        defineReadOnly(this, \"address\", address);\r\n        defineReadOnly(this, \"interface\", contractInterface);\r\n        defineReadOnly(this, \"fragment\", fragment);\r\n    }\r\n\r\n\r\n    prepareEvent(event: Event): void {\r\n        super.prepareEvent(event);\r\n\r\n        event.event = this.fragment.name;\r\n        event.eventSignature = this.fragment.format();\r\n\r\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\r\n            return this.interface.decodeEventLog(this.fragment, data, topics);\r\n        };\r\n\r\n        try {\r\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\r\n        } catch (error) {\r\n            event.args = null;\r\n            event.decodeError = error;\r\n        }\r\n    }\r\n\r\n    getEmit(event: Event): Array<any> {\r\n        const errors = checkResultErrors(event.args);\r\n        if (errors.length) { throw errors[0].error; }\r\n\r\n        const args = (event.args || []).slice();\r\n        args.push(event);\r\n        return args;\r\n    }\r\n}\r\n\r\n// A Wildcard Event will attempt to populate:\r\n//  - event            The name of the event name\r\n//  - eventSignature   The full signature of the event\r\n//  - decode           A function to decode data and topics\r\n//  - args             The decoded data and topics\r\nclass WildcardRunningEvent extends RunningEvent {\r\n    readonly address: string;\r\n    readonly interface: Interface;\r\n\r\n    constructor(address: string, contractInterface: Interface) {\r\n        super(\"*\", { address: address });\r\n        defineReadOnly(this, \"address\", address);\r\n        defineReadOnly(this, \"interface\", contractInterface);\r\n    }\r\n\r\n    prepareEvent(event: Event): void {\r\n        super.prepareEvent(event);\r\n\r\n        try {\r\n            const parsed = this.interface.parseLog(event);\r\n            event.event = parsed.name;\r\n            event.eventSignature = parsed.signature;\r\n\r\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\r\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\r\n            };\r\n\r\n            event.args = parsed.args;\r\n        } catch (error) {\r\n            // No matching event\r\n        }\r\n    }\r\n}\r\n\r\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\r\n\r\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\r\n\r\n\r\nexport class BaseContract {\r\n    readonly address: string;\r\n    readonly interface: Interface;\r\n\r\n    readonly signer: Signer;\r\n    readonly provider: Provider;\r\n\r\n    readonly functions: { [ name: string ]: ContractFunction };\r\n\r\n    readonly callStatic: { [ name: string ]: ContractFunction };\r\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\r\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\r\n\r\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\r\n\r\n    // This will always be an address. This will only differ from\r\n    // address if an ENS name was used in the constructor\r\n    readonly resolvedAddress: Promise<string>;\r\n\r\n    // This is only set if the contract was created with a call to deploy\r\n    readonly deployTransaction: TransactionResponse;\r\n\r\n    _deployedPromise: Promise<Contract>;\r\n\r\n    // A list of RunningEvents to track listeners for each event tag\r\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\r\n\r\n    // Wrapped functions to call emit and allow deregistration from the provider\r\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\r\n\r\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\r\n        logger.checkNew(new.target, Contract);\r\n\r\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\r\n        //address = getAddress(address);\r\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\r\n\r\n        if (signerOrProvider == null) {\r\n            defineReadOnly(this, \"provider\", null);\r\n            defineReadOnly(this, \"signer\", null);\r\n        } else if (Signer.isSigner(signerOrProvider)) {\r\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\r\n            defineReadOnly(this, \"signer\", signerOrProvider);\r\n        } else if (Provider.isProvider(signerOrProvider)) {\r\n            defineReadOnly(this, \"provider\", signerOrProvider);\r\n            defineReadOnly(this, \"signer\", null);\r\n        } else {\r\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\r\n        }\r\n\r\n        defineReadOnly(this, \"callStatic\", { });\r\n        defineReadOnly(this, \"estimateGas\", { });\r\n        defineReadOnly(this, \"functions\", { });\r\n        defineReadOnly(this, \"populateTransaction\", { });\r\n\r\n        defineReadOnly(this, \"filters\", { });\r\n\r\n        {\r\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\r\n            Object.keys(this.interface.events).forEach((eventSignature) => {\r\n                const event = this.interface.events[eventSignature];\r\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\r\n                    return {\r\n                        address: this.address,\r\n                        topics: this.interface.encodeFilterTopics(event, args)\r\n                   }\r\n                });\r\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\r\n                uniqueFilters[event.name].push(eventSignature);\r\n            });\r\n\r\n            Object.keys(uniqueFilters).forEach((name) => {\r\n                const filters = uniqueFilters[name];\r\n                if (filters.length === 1) {\r\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\r\n                } else {\r\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\r\n                }\r\n            });\r\n        }\r\n\r\n        defineReadOnly(this, \"_runningEvents\", { });\r\n        defineReadOnly(this, \"_wrappedEmits\", { });\r\n\r\n        if (addressOrName == null) {\r\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\r\n        }\r\n\r\n        defineReadOnly(this, \"address\", addressOrName);\r\n        if (this.provider) {\r\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\r\n        } else {\r\n            try {\r\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\r\n            } catch (error) {\r\n                // Without a provider, we cannot use ENS names\r\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                    operation: \"new Contract\"\r\n                });\r\n            }\r\n        }\r\n\r\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\r\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\r\n        Object.keys(this.interface.functions).forEach((signature) => {\r\n            const fragment = this.interface.functions[signature];\r\n\r\n            // Check that the signature is unique; if not the ABI generation has\r\n            // not been cleaned or may be incorrectly generated\r\n            if (uniqueSignatures[signature]) {\r\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\r\n                return;\r\n            }\r\n            uniqueSignatures[signature] = true;\r\n\r\n            // Track unique names; we only expose bare named functions if they\r\n            // are ambiguous\r\n            {\r\n                const name = fragment.name;\r\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\r\n                uniqueNames[`%${ name }`].push(signature);\r\n            }\r\n\r\n            if ((<Contract>this)[signature] == null) {\r\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\r\n            }\r\n\r\n            // We do not collapse simple calls on this bucket, which allows\r\n            // frameworks to safely use this without introspection as well as\r\n            // allows decoding error recovery.\r\n            if (this.functions[signature] == null) {\r\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\r\n            }\r\n\r\n            if (this.callStatic[signature] == null) {\r\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\r\n            }\r\n\r\n            if (this.populateTransaction[signature] == null) {\r\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\r\n            }\r\n\r\n            if (this.estimateGas[signature] == null) {\r\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\r\n            }\r\n        });\r\n\r\n        Object.keys(uniqueNames).forEach((name) => {\r\n            // Ambiguous names to not get attached as bare names\r\n            const signatures = uniqueNames[name];\r\n            if (signatures.length > 1) { return; }\r\n\r\n            // Strip off the leading \"%\" used for prototype protection\r\n            name = name.substring(1);\r\n\r\n            const signature = signatures[0];\r\n\r\n            // If overwriting a member property that is null, swallow the error\r\n            try {\r\n                if ((<Contract>this)[name] == null) {\r\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\r\n                }\r\n            } catch (e) { }\r\n\r\n            if (this.functions[name] == null) {\r\n                defineReadOnly(this.functions, name, this.functions[signature]);\r\n            }\r\n\r\n            if (this.callStatic[name] == null) {\r\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\r\n            }\r\n\r\n            if (this.populateTransaction[name] == null) {\r\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\r\n            }\r\n\r\n            if (this.estimateGas[name] == null) {\r\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\r\n            }\r\n        });\r\n    }\r\n\r\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\r\n        return getContractAddress(transaction);\r\n    }\r\n\r\n    static getInterface(contractInterface: ContractInterface): Interface {\r\n        if (Interface.isInterface(contractInterface)) {\r\n            return contractInterface;\r\n        }\r\n        return new Interface(contractInterface);\r\n    }\r\n\r\n    // @TODO: Allow timeout?\r\n    deployed(): Promise<Contract> {\r\n        return this._deployed();\r\n    }\r\n\r\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\r\n        if (!this._deployedPromise) {\r\n\r\n            // If we were just deployed, we know the transaction we should occur in\r\n            if (this.deployTransaction) {\r\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\r\n                    return this;\r\n                });\r\n\r\n            } else {\r\n                // @TODO: Once we allow a timeout to be passed in, we will wait\r\n                // up to that many blocks for getCode\r\n\r\n                // Otherwise, poll for our code to be deployed\r\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\r\n                    if (code === \"0x\") {\r\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                            contractAddress: this.address,\r\n                            operation: \"getDeployed\"\r\n                        });\r\n                    }\r\n                    return this;\r\n                });\r\n            }\r\n        }\r\n\r\n        return this._deployedPromise;\r\n    }\r\n\r\n    // @TODO:\r\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\r\n\r\n    // @TODO:\r\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\r\n\r\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\r\n        if (!this.signer) {\r\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\r\n        }\r\n\r\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\r\n\r\n        [\"from\", \"to\"].forEach(function(key) {\r\n            if ((<any>tx)[key] == null) { return; }\r\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\r\n        });\r\n\r\n        tx.to = this.resolvedAddress;\r\n        return this.deployed().then(() => {\r\n            return this.signer.sendTransaction(tx);\r\n        });\r\n    }\r\n\r\n    // Reconnect to a different signer or provider\r\n    connect(signerOrProvider: Signer | Provider | string): Contract {\r\n        if (typeof(signerOrProvider) === \"string\") {\r\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\r\n        }\r\n\r\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\r\n        if (this.deployTransaction) {\r\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\r\n        }\r\n        return contract;\r\n    }\r\n\r\n    // Re-attach to a different on-chain instance of this contract\r\n    attach(addressOrName: string): Contract {\r\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\r\n    }\r\n\r\n    static isIndexed(value: any): value is Indexed {\r\n        return Indexed.isIndexed(value);\r\n    }\r\n\r\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\r\n        // Already have an instance of this event running; we can re-use it\r\n        if (this._runningEvents[runningEvent.tag]) {\r\n            return this._runningEvents[runningEvent.tag];\r\n         }\r\n         return runningEvent\r\n    }\r\n\r\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\r\n        if (typeof(eventName) === \"string\") {\r\n\r\n            // Listen for \"error\" events (if your contract has an error event, include\r\n            // the full signature to bypass this special event keyword)\r\n            if (eventName === \"error\") {\r\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\r\n            }\r\n\r\n            // Listen for any event that is registered\r\n            if (eventName === \"event\") {\r\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\r\n            }\r\n\r\n            // Listen for any event\r\n            if (eventName === \"*\") {\r\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\r\n            }\r\n\r\n            // Get the event Fragment (throws if ambiguous/unknown event)\r\n            const fragment = this.interface.getEvent(eventName)\r\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\r\n        }\r\n\r\n        // We have topics to filter by...\r\n        if (eventName.topics && eventName.topics.length > 0) {\r\n\r\n            // Is it a known topichash? (throws if no matching topichash)\r\n            try {\r\n                const topic = eventName.topics[0];\r\n                if (typeof(topic) !== \"string\") {\r\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\r\n                }\r\n                const fragment = this.interface.getEvent(topic);\r\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\r\n            } catch (error) { }\r\n\r\n            // Filter by the unknown topichash\r\n            const filter: EventFilter = {\r\n                address: this.address,\r\n                topics: eventName.topics\r\n            }\r\n\r\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\r\n        }\r\n\r\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\r\n    }\r\n\r\n    _checkRunningEvents(runningEvent: RunningEvent): void {\r\n        if (runningEvent.listenerCount() === 0) {\r\n            delete this._runningEvents[runningEvent.tag];\r\n\r\n            // If we have a poller for this, remove it\r\n            const emit = this._wrappedEmits[runningEvent.tag];\r\n            if (emit && runningEvent.filter) {\r\n                this.provider.off(runningEvent.filter, emit);\r\n                delete this._wrappedEmits[runningEvent.tag];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Subclasses can override this to gracefully recover\r\n    // from parse errors if they wish\r\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\r\n        const event = <Event>deepCopy(log);\r\n\r\n        event.removeListener = () => {\r\n            if (!listener) { return; }\r\n            runningEvent.removeListener(listener);\r\n            this._checkRunningEvents(runningEvent);\r\n        };\r\n\r\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\r\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\r\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\r\n\r\n        // This may throw if the topics and data mismatch the signature\r\n        runningEvent.prepareEvent(event);\r\n\r\n        return event;\r\n    }\r\n\r\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\r\n        if (!this.provider) {\r\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\r\n        }\r\n\r\n        runningEvent.addListener(listener, once);\r\n\r\n        // Track this running event and its listeners (may already be there; but no hard in updating)\r\n        this._runningEvents[runningEvent.tag] = runningEvent;\r\n\r\n        // If we are not polling the provider, start polling\r\n        if (!this._wrappedEmits[runningEvent.tag]) {\r\n            const wrappedEmit = (log: Log) => {\r\n                let event = this._wrapEvent(runningEvent, log, listener);\r\n\r\n                // Try to emit the result for the parameterized event...\r\n                if (event.decodeError == null) {\r\n                    try {\r\n                        const args = runningEvent.getEmit(event);\r\n                        this.emit(runningEvent.filter, ...args);\r\n                    } catch (error) {\r\n                        event.decodeError = error.error;\r\n                    }\r\n                }\r\n\r\n                // Always emit \"event\" for fragment-base events\r\n                if (runningEvent.filter != null) {\r\n                    this.emit(\"event\", event);\r\n                }\r\n\r\n                // Emit \"error\" if there was an error\r\n                if (event.decodeError != null) {\r\n                    this.emit(\"error\", event.decodeError, event);\r\n                }\r\n            };\r\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\r\n\r\n            // Special events, like \"error\" do not have a filter\r\n            if (runningEvent.filter != null) {\r\n                this.provider.on(runningEvent.filter, wrappedEmit);\r\n            }\r\n        }\r\n    }\r\n\r\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\r\n        const runningEvent = this._getRunningEvent(event);\r\n        const filter = shallowCopy(runningEvent.filter);\r\n\r\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\r\n            if (toBlock != null) {\r\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\r\n            }\r\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\r\n        } else {\r\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\r\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\r\n        }\r\n\r\n        return this.provider.getLogs(filter).then((logs) => {\r\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\r\n        });\r\n    }\r\n\r\n    on(event: EventFilter | string, listener: Listener): this {\r\n        this._addEventListener(this._getRunningEvent(event), listener, false);\r\n        return this;\r\n    }\r\n\r\n    once(event: EventFilter | string, listener: Listener): this {\r\n        this._addEventListener(this._getRunningEvent(event), listener, true);\r\n        return this;\r\n    }\r\n\r\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\r\n        if (!this.provider) { return false; }\r\n\r\n        const runningEvent = this._getRunningEvent(eventName);\r\n        const result = (runningEvent.run(args) > 0);\r\n\r\n        // May have drained all the \"once\" events; check for living events\r\n        this._checkRunningEvents(runningEvent);\r\n\r\n        return result;\r\n    }\r\n\r\n    listenerCount(eventName?: EventFilter | string): number {\r\n        if (!this.provider) { return 0; }\r\n        if (eventName == null) {\r\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\r\n                return accum + this._runningEvents[key].listenerCount();\r\n            }, 0);\r\n        }\r\n        return this._getRunningEvent(eventName).listenerCount();\r\n    }\r\n\r\n    listeners(eventName?: EventFilter | string): Array<Listener> {\r\n        if (!this.provider) { return []; }\r\n\r\n        if (eventName == null) {\r\n            const result: Array<Listener> = [ ];\r\n            for (let tag in this._runningEvents) {\r\n                this._runningEvents[tag].listeners().forEach((listener) => {\r\n                    result.push(listener)\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n\r\n        return this._getRunningEvent(eventName).listeners();\r\n    }\r\n\r\n    removeAllListeners(eventName?: EventFilter | string): this {\r\n        if (!this.provider) { return this; }\r\n\r\n        if (eventName == null) {\r\n            for (const tag in this._runningEvents) {\r\n                const runningEvent = this._runningEvents[tag];\r\n                runningEvent.removeAllListeners();\r\n                this._checkRunningEvents(runningEvent);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Delete any listeners\r\n        const runningEvent = this._getRunningEvent(eventName);\r\n        runningEvent.removeAllListeners();\r\n        this._checkRunningEvents(runningEvent);\r\n\r\n        return this;\r\n    }\r\n\r\n    off(eventName: EventFilter | string, listener: Listener): this {\r\n        if (!this.provider) { return this; }\r\n        const runningEvent = this._getRunningEvent(eventName);\r\n        runningEvent.removeListener(listener);\r\n        this._checkRunningEvents(runningEvent);\r\n        return this;\r\n    }\r\n\r\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\r\n        return this.off(eventName, listener);\r\n    }\r\n\r\n}\r\n\r\nexport class Contract extends BaseContract {\r\n    // The meta-class properties\r\n    readonly [ key: string ]: ContractFunction | any;\r\n}\r\n\r\nexport class ContractFactory {\r\n\r\n    readonly interface: Interface;\r\n    readonly bytecode: string;\r\n    readonly signer: Signer;\r\n\r\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\r\n\r\n        let bytecodeHex: string = null;\r\n\r\n        if (typeof(bytecode) === \"string\") {\r\n            bytecodeHex = bytecode;\r\n        } else if (isBytes(bytecode)) {\r\n            bytecodeHex = hexlify(bytecode);\r\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\r\n            // Allow the bytecode object from the Solidity compiler\r\n            bytecodeHex = (<any>bytecode).object;\r\n        } else {\r\n            // Crash in the next verification step\r\n            bytecodeHex = \"!\";\r\n        }\r\n\r\n        // Make sure it is 0x prefixed\r\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\r\n\r\n        // Make sure the final result is valid bytecode\r\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\r\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\r\n        }\r\n\r\n        // If we have a signer, make sure it is valid\r\n        if (signer && !Signer.isSigner(signer)) {\r\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\r\n        }\r\n\r\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\r\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\r\n        defineReadOnly(this, \"signer\", signer || null);\r\n    }\r\n\r\n    // @TODO: Future; rename to populateTransaction?\r\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\r\n        let tx: TransactionRequest = { };\r\n\r\n        // If we have 1 additional argument, we allow transaction overrides\r\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\r\n            tx = shallowCopy(args.pop());\r\n            for (const key in tx) {\r\n                if (!allowedTransactionKeys[key]) {\r\n                    throw new Error(\"unknown transaction override \" + key);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Do not allow these to be overridden in a deployment transaction\r\n        [\"data\", \"from\", \"to\"].forEach((key) => {\r\n            if ((<any>tx)[key] == null) { return; }\r\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\r\n        });\r\n\r\n        if (tx.value) {\r\n            const value = BigNumber.from(tx.value);\r\n            if (!value.isZero() && !this.interface.deploy.payable) {\r\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                    operation: \"overrides.value\",\r\n                    value: tx.value\r\n                });\r\n            }\r\n        }\r\n\r\n        // Make sure the call matches the constructor signature\r\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\r\n\r\n        // Set the data to the bytecode + the encoded constructor arguments\r\n        tx.data = hexlify(concat([\r\n            this.bytecode,\r\n            this.interface.encodeDeploy(args)\r\n        ]));\r\n\r\n        return tx\r\n    }\r\n\r\n    async deploy(...args: Array<any>): Promise<Contract> {\r\n\r\n        let overrides: any = { };\r\n\r\n        // If 1 extra parameter was passed in, it contains overrides\r\n        if (args.length === this.interface.deploy.inputs.length + 1) {\r\n            overrides = args.pop();\r\n        }\r\n\r\n        // Make sure the call matches the constructor signature\r\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\r\n\r\n        // Resolve ENS names and promises in the arguments\r\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\r\n        params.push(overrides);\r\n\r\n        // Get the deployment transaction (with optional overrides)\r\n        const unsignedTx = this.getDeployTransaction(...params);\r\n\r\n        // Send the deployment transaction\r\n        const tx = await this.signer.sendTransaction(unsignedTx);\r\n\r\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\r\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\r\n\r\n        // Add the modified wait that wraps events\r\n        addContractWait(contract, tx);\r\n\r\n        defineReadOnly(contract, \"deployTransaction\", tx);\r\n        return contract;\r\n    }\r\n\r\n    attach(address: string): Contract {\r\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\r\n    }\r\n\r\n    connect(signer: Signer) {\r\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\r\n    }\r\n\r\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\r\n        if (compilerOutput == null) {\r\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\r\n        }\r\n\r\n        if (typeof(compilerOutput) === \"string\") {\r\n            compilerOutput = JSON.parse(compilerOutput);\r\n        }\r\n\r\n        const abi = compilerOutput.abi;\r\n\r\n        let bytecode: any = null;\r\n        if (compilerOutput.bytecode) {\r\n            bytecode = compilerOutput.bytecode;\r\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\r\n            bytecode = compilerOutput.evm.bytecode;\r\n        }\r\n\r\n        return new this(abi, bytecode, signer);\r\n    }\r\n\r\n    static getInterface(contractInterface: ContractInterface) {\r\n        return Contract.getInterface(contractInterface);\r\n    }\r\n\r\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\r\n        return getContractAddress(tx);\r\n    }\r\n\r\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\r\n        return new Contract(address, contractInterface, signer);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}