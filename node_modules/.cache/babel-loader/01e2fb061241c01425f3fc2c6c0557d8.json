{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.alchemyapi.io/v2/\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.alchemyapi.io/v2/\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.alchemyapi.io/v2/\";\n        break;\n\n      case \"kovan\":\n        host = \"eth-kovan.alchemyapi.io/v2/\";\n        break;\n\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n\n      case \"arbitrum\":\n        host = \"arb-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"arbitrum-rinkeby\":\n        host = \"arb-rinkeby.g.alchemy.com/v2/\";\n        break;\n\n      case \"optimism\":\n        host = \"opt-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"optimism-kovan\":\n        host = \"opt-kovan.g.alchemy.com/v2/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","constructor","network","apiKey","provider","AlchemyProvider","url","connection","replace","isCommunityResource","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["E:\\6883proj\\6883project\\node_modules\\@ethersproject\\providers\\src.ts\\alchemy-provider.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { ConnectionInfo } from \"@ethersproject/web\";\r\n\r\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\r\nimport { WebSocketProvider } from \"./websocket-provider\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\r\n\r\n// This key was provided to ethers.js by Alchemy to be used by the\r\n// default provider, but it is recommended that for your own\r\n// production environments, that you acquire your own API key at:\r\n//   https://dashboard.alchemyapi.io\r\n\r\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\r\n\r\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\r\n    readonly apiKey: string;\r\n\r\n    constructor(network?: Networkish, apiKey?: any) {\r\n        const provider = new AlchemyProvider(network, apiKey);\r\n\r\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\r\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\r\n\r\n        super(url, provider.network);\r\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n\r\nexport class AlchemyProvider extends UrlJsonRpcProvider {\r\n\r\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\r\n        return new AlchemyWebSocketProvider(network, apiKey);\r\n    }\r\n\r\n    static getApiKey(apiKey: any): any {\r\n        if (apiKey == null) { return defaultApiKey; }\r\n        if (apiKey && typeof(apiKey) !== \"string\") {\r\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\r\n        }\r\n        return apiKey;\r\n    }\r\n\r\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\r\n        let host = null;\r\n        switch (network.name) {\r\n            case \"homestead\":\r\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"ropsten\":\r\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"rinkeby\":\r\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"goerli\":\r\n                host = \"eth-goerli.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"kovan\":\r\n                host = \"eth-kovan.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"matic\":\r\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"maticmum\":\r\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"arbitrum\":\r\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"arbitrum-rinkeby\":\r\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"optimism\":\r\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"optimism-kovan\":\r\n                host = \"opt-kovan.g.alchemy.com/v2/\";\r\n                break;\r\n            default:\r\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\r\n        }\r\n\r\n        return {\r\n            allowGzip: true,\r\n            url: (\"https:/\" + \"/\" + host + apiKey),\r\n            throttleCallback: (attempt: number, url: string) => {\r\n                if (apiKey === defaultApiKey) {\r\n                    showThrottleMessage();\r\n                }\r\n                return Promise.resolve(true);\r\n            }\r\n        };\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}